"""
An√°lisis Vertical Mejorado para Estados Financieros
====================================================
Calcula an√°lisis vertical autom√°tico seg√∫n formato del a√±o (‚â§2009 vs ‚â•2010)

Estados analizados:
- ‚â§2009: BALANCE GENERAL, ESTADO DE GANANCIAS Y PERDIDAS, ESTADO DE FLUJO DE EFECTIVO
- ‚â•2010: ESTADO DE SITUACION FINANCIERA, ESTADO DE RESULTADOS, ESTADO DE FLUJO DE EFECTIVO

Reglas de c√°lculo:
1. ACTIVOS: (Cuenta / TOTAL ACTIVOS) * 100 - desde inicio hasta celda "TOTAL ACTIVOS"
2. PASIVOS: (Cuenta / Total Pasivos) * 100 - desde inicio pasivos hasta celda "Total Pasivos"
3. PATRIMONIO: NO SE CALCULA (se ignora todo despu√©s de "Total Pasivos")
"""

import pandas as pd
import re
from typing import Dict, List, Tuple, Optional, Any


class AnalisisVerticalMejorado:
    """Clase para realizar an√°lisis vertical autom√°tico de estados financieros"""
    
    # Mapeo de estados seg√∫n el a√±o
    ESTADOS_PRE_2010 = {
        'balance': 'BALANCE GENERAL',
        'resultados': 'ESTADO DE GANANCIAS Y PERDIDAS',
        'flujo': 'ESTADO DE FLUJO DE EFECTIVO'
    }
    
    ESTADOS_POST_2010 = {
        'balance': 'ESTADO DE SITUACION FINANCIERA',
        'resultados': 'ESTADO DE RESULTADOS',
        'flujo': 'ESTADO DE FLUJO DE EFECTIVO'
    }
    
    def __init__(self):
        self.resultados = {}
    
    def analizar_desde_extractor(self, resultados_extractor: Dict) -> Dict[str, Any]:
        """
        Realiza an√°lisis vertical desde los resultados del extractor mejorado
        
        Args:
            resultados_extractor: Dict con resultados de extractor_estados_mejorado.py
        
        Returns:
            Dict con an√°lisis vertical de los 3 estados principales
        """
        a√±o_documento = resultados_extractor['a√±o_documento']
        formato = resultados_extractor['formato']
        estados = resultados_extractor['estados']
        metadatos = resultados_extractor.get('metadatos', {})
        
        print(f"\n{'='*60}")
        print(f"üìä AN√ÅLISIS VERTICAL - {metadatos.get('empresa', 'N/A')}")
        print(f"üìÖ A√±o: {a√±o_documento} | Formato: {formato.upper()}")
        print(f"{'='*60}\n")
        
        resultados_analisis = {
            'a√±o_documento': a√±o_documento,
            'formato': formato,
            'empresa': metadatos.get('empresa', 'No identificada'),
            'tipo': metadatos.get('tipo', 'No especificado'),
            'estados_analizados': {},
            'resumen': {}
        }
        
        # Analizar Balance General / Estado de Situaci√≥n Financiera
        if 'balance' in estados:
            print(f"üìã Analizando Balance/Situaci√≥n Financiera...")
            balance_analisis = self._analizar_balance(estados['balance'])
            resultados_analisis['estados_analizados']['balance'] = balance_analisis
            print(f"   ‚úÖ Activos: {balance_analisis['total_cuentas_activos']} cuentas analizadas")
            print(f"   ‚úÖ Pasivos: {balance_analisis['total_cuentas_pasivos']} cuentas analizadas")
            print(f"   ‚ö†Ô∏è  Patrimonio: Ignorado (seg√∫n especificaci√≥n)\n")
        
        # Analizar Estado de Resultados / Ganancias y P√©rdidas
        if 'resultados' in estados:
            print(f"üìã Analizando Estado de Resultados...")
            resultados_estado = self._analizar_resultados(estados['resultados'])
            resultados_analisis['estados_analizados']['resultados'] = resultados_estado
            print(f"   ‚úÖ {resultados_estado['total_cuentas_analizadas']} cuentas analizadas\n")
        
        # Analizar Flujo de Efectivo
        if 'flujo' in estados:
            print(f"üìã Analizando Flujo de Efectivo...")
            flujo_analisis = self._analizar_flujo(estados['flujo'])
            resultados_analisis['estados_analizados']['flujo'] = flujo_analisis
            print(f"   ‚úÖ {flujo_analisis['total_cuentas_analizadas']} cuentas analizadas\n")
        
        # Generar resumen
        resultados_analisis['resumen'] = self._generar_resumen(resultados_analisis)
        
        print(f"{'='*60}")
        print(f"‚úÖ An√°lisis vertical completado")
        print(f"{'='*60}\n")
        
        return resultados_analisis
    
    def _analizar_balance(self, balance: Dict) -> Dict[str, Any]:
        """
        Analiza Balance General / Estado de Situaci√≥n Financiera
        
        Reglas:
        - ACTIVOS: (Cuenta / TOTAL ACTIVOS) * 100 hasta encontrar "TOTAL ACTIVOS"
        - PASIVOS: (Cuenta / Total Pasivos) * 100 hasta encontrar "Total Pasivos"
        - PATRIMONIO: NO SE CALCULA
        """
        a√±os = balance['a√±os']
        a√±o_analisis = a√±os[0]  # A√±o m√°s reciente
        cuentas = balance['cuentas']
        
        resultado = {
            'nombre_estado': balance['nombre'],
            'a√±o_analisis': a√±o_analisis,
            'activos': [],
            'pasivos': [],
            'total_activos': 0,
            'total_pasivos': 0,
            'total_cuentas_activos': 0,
            'total_cuentas_pasivos': 0
        }
        
        # Detectar si es formato pre-2010 o post-2010
        es_pre_2010 = 'BALANCE GENERAL' in balance['nombre'].upper()
        
        # Buscar totales primero con patrones espec√≠ficos por formato
        if es_pre_2010:
            # Para a√±os ‚â§2009: buscar "TOTAL ACTIVO" (singular)
            total_activos = self._buscar_total(cuentas, a√±o_analisis, 
                ['TOTAL ACTIVO'])
            total_pasivos = self._buscar_total(cuentas, a√±o_analisis,
                ['TOTAL PASIVO'])
        else:
            # Para a√±os ‚â•2010: buscar "TOTAL ACTIVOS" (plural) o variaciones
            total_activos = self._buscar_total(cuentas, a√±o_analisis, 
                ['TOTAL ACTIVOS', 'TOTAL DE ACTIVOS', 'Total Activos', 'ACTIVOS TOTALES'])
            total_pasivos = self._buscar_total(cuentas, a√±o_analisis,
                ['TOTAL PASIVOS', 'TOTAL DE PASIVOS', 'Total Pasivos', 'PASIVOS TOTALES'])
        
        if not total_activos or total_activos == 0:
            print(f"   ‚ö†Ô∏è No se encontr√≥ TOTAL ACTIVO{'S' if not es_pre_2010 else ''} v√°lido")
            return resultado
        
        if not total_pasivos or total_pasivos == 0:
            print(f"   ‚ö†Ô∏è No se encontr√≥ Total Pasivo{'s' if not es_pre_2010 else ''} v√°lido")
        
        resultado['total_activos'] = total_activos
        resultado['total_pasivos'] = total_pasivos
        
        # Fase 1: Procesar ACTIVOS (hasta encontrar TOTAL ACTIVOS)
        fase = 'activos'
        for cuenta in cuentas:
            nombre = cuenta['nombre'].strip()
            nombre_upper = nombre.upper()
            
            # Verificar si llegamos al final de ACTIVOS
            if self._es_total_activos(nombre_upper, es_pre_2010):
                # Agregar el total con an√°lisis vertical
                valor = cuenta['valores'].get(a√±o_analisis, 0)
                porcentaje = 100.0  # El total siempre es 100%
                resultado['activos'].append({
                    'cuenta': nombre,
                    'valor': valor,
                    'analisis_vertical': porcentaje,
                    'es_total': True
                })
                resultado['total_cuentas_activos'] += 1
                # Cambiar a fase PASIVOS
                fase = 'pasivos'
                continue
            
            # Verificar si llegamos al final de PASIVOS (ignorar PATRIMONIO)
            if fase == 'pasivos' and self._es_total_pasivos(nombre_upper, es_pre_2010):
                # Agregar el total de pasivos
                valor = cuenta['valores'].get(a√±o_analisis, 0)
                porcentaje = 100.0
                resultado['pasivos'].append({
                    'cuenta': nombre,
                    'valor': valor,
                    'analisis_vertical': porcentaje,
                    'es_total': True
                })
                resultado['total_cuentas_pasivos'] += 1
                # Terminar procesamiento (ignorar PATRIMONIO)
                print(f"   üõë Deteniendo en '{nombre}' - Patrimonio ignorado")
                break
            
            # Procesar cuenta seg√∫n la fase
            valor = cuenta['valores'].get(a√±o_analisis, 0)
            
            if fase == 'activos' and total_activos > 0:
                porcentaje = (valor / total_activos) * 100
                resultado['activos'].append({
                    'cuenta': nombre,
                    'valor': valor,
                    'analisis_vertical': porcentaje,
                    'es_total': cuenta.get('es_total', False)
                })
                resultado['total_cuentas_activos'] += 1
            
            elif fase == 'pasivos' and total_pasivos > 0:
                porcentaje = (valor / total_pasivos) * 100
                resultado['pasivos'].append({
                    'cuenta': nombre,
                    'valor': valor,
                    'analisis_vertical': porcentaje,
                    'es_total': cuenta.get('es_total', False)
                })
                resultado['total_cuentas_pasivos'] += 1
        
        return resultado
    
    def _analizar_resultados(self, resultados: Dict) -> Dict[str, Any]:
        """
        Analiza Estado de Resultados / Ganancias y P√©rdidas
        
        Calcula: (Cuenta / Ventas o Ingresos Totales) * 100
        """
        a√±os = resultados['a√±os']
        a√±o_analisis = a√±os[0]
        cuentas = resultados['cuentas']
        
        resultado = {
            'nombre_estado': resultados['nombre'],
            'a√±o_analisis': a√±o_analisis,
            'cuentas_analizadas': [],
            'total_ingresos': 0,
            'total_cuentas_analizadas': 0
        }
        
        # Buscar total de ventas/ingresos (primera cuenta principal)
        total_ingresos = self._buscar_total_ingresos(cuentas, a√±o_analisis)
        
        if not total_ingresos or total_ingresos == 0:
            print(f"   ‚ö†Ô∏è No se encontr√≥ Total de Ingresos/Ventas v√°lido")
            return resultado
        
        resultado['total_ingresos'] = total_ingresos
        
        # Calcular an√°lisis vertical para cada cuenta
        for cuenta in cuentas:
            nombre = cuenta['nombre'].strip()
            valor = cuenta['valores'].get(a√±o_analisis, 0)
            
            porcentaje = (valor / total_ingresos) * 100
            
            resultado['cuentas_analizadas'].append({
                'cuenta': nombre,
                'valor': valor,
                'analisis_vertical': porcentaje,
                'es_total': cuenta.get('es_total', False)
            })
            resultado['total_cuentas_analizadas'] += 1
        
        return resultado
    
    def _analizar_flujo(self, flujo: Dict) -> Dict[str, Any]:
        """
        Analiza Estado de Flujo de Efectivo
        
        Reglas ‚â•2010:
        - Cada secci√≥n (Operaci√≥n, Inversi√≥n, Financiaci√≥n) tiene su propia base (100%)
        - Las cuentas se dividen por la base de su secci√≥n correspondiente
        - Las bases son las celdas que contienen "Flujos de Efectivo procedente de Actividades de..."
        - IMPORTANTE: Las cuentas HACIA ARRIBA de cada base se calculan con esa base
        
        Reglas ‚â§2009:
        - Similar pero con nombres diferentes de secciones
        """
        a√±os = flujo['a√±os']
        a√±o_analisis = a√±os[0]
        cuentas = flujo['cuentas']
        
        resultado = {
            'nombre_estado': flujo['nombre'],
            'a√±o_analisis': a√±o_analisis,
            'cuentas_analizadas': [],
            'total_cuentas_analizadas': 0,
            'bases_detectadas': {}
        }
        
        # PASO 1: Identificar las bases y sus posiciones
        bases_posiciones = []
        for i, cuenta in enumerate(cuentas):
            nombre_upper = cuenta['nombre'].upper().strip()
            if self._es_base_flujo(nombre_upper):
                valor = cuenta['valores'].get(a√±o_analisis, 0)
                bases_posiciones.append({
                    'indice': i,
                    'valor': valor if valor != 0 else 1,
                    'nombre': cuenta['nombre']
                })
        
        resultado['bases_detectadas'] = {f"base_{i+1}": b['nombre'] for i, b in enumerate(bases_posiciones)}
        
        # PASO 2: Procesar todas las cuentas asignando a cada una su base correspondiente
        for i, cuenta in enumerate(cuentas):
            nombre = cuenta['nombre'].strip()
            nombre_upper = nombre.upper()
            valor = cuenta['valores'].get(a√±o_analisis, 0)
            
            # Verificar si esta cuenta es una base
            if self._es_base_flujo(nombre_upper):
                # Esta cuenta se marca como 100% de su secci√≥n
                porcentaje = 100.0
                
                resultado['cuentas_analizadas'].append({
                    'cuenta': nombre,
                    'valor': valor,
                    'analisis_vertical': porcentaje,
                    'es_total': True,
                    'es_base': True
                })
                resultado['total_cuentas_analizadas'] += 1
            else:
                # Encontrar la base m√°s cercana HACIA ABAJO (siguiente base)
                base_correspondiente = None
                for base_info in bases_posiciones:
                    if i < base_info['indice']:
                        # Esta base est√° despu√©s de la cuenta actual
                        base_correspondiente = base_info['valor']
                        break
                
                # Si no hay base hacia abajo, usar la √∫ltima base disponible
                if base_correspondiente is None and bases_posiciones:
                    base_correspondiente = bases_posiciones[-1]['valor']
                
                # Calcular porcentaje
                if base_correspondiente and base_correspondiente != 0:
                    porcentaje = (valor / base_correspondiente) * 100
                else:
                    porcentaje = 0.0
                
                resultado['cuentas_analizadas'].append({
                    'cuenta': nombre,
                    'valor': valor,
                    'analisis_vertical': porcentaje,
                    'es_total': cuenta.get('es_total', False),
                    'es_base': False
                })
                resultado['total_cuentas_analizadas'] += 1
        
        return resultado
    
    def _buscar_total(self, cuentas: List[Dict], a√±o: int, patrones: List[str]) -> float:
        """Busca un valor total usando una lista de patrones"""
        for cuenta in cuentas:
            nombre_upper = cuenta['nombre'].upper().strip()
            for patron in patrones:
                if patron.upper() in nombre_upper and len(nombre_upper) <= len(patron) + 10:
                    return cuenta['valores'].get(a√±o, 0)
        return 0
    
    def _buscar_total_ingresos(self, cuentas: List[Dict], a√±o: int) -> float:
        """Busca el total de ingresos/ventas"""
        patrones = [
            'VENTAS NETAS',
            'INGRESOS DE ACTIVIDADES ORDINARIAS',
            'INGRESOS OPERACIONALES',
            'VENTAS',
            'INGRESOS'
        ]
        
        # Buscar la primera cuenta con estos patrones (suele ser la primera l√≠nea)
        for cuenta in cuentas[:5]:  # Revisar las primeras 5 cuentas
            nombre_upper = cuenta['nombre'].upper().strip()
            for patron in patrones:
                if patron in nombre_upper:
                    valor = cuenta['valores'].get(a√±o, 0)
                    if valor > 0:  # Asegurar que sea positivo
                        return valor
        
        return 0
    
    def _buscar_flujo_neto(self, cuentas: List[Dict], a√±o: int) -> float:
        """Busca el flujo neto de efectivo"""
        patrones = [
            'AUMENTO NETO DE EFECTIVO',
            'DISMINUCION NETA DE EFECTIVO',
            'EFECTIVO NETO',
            'FLUJO NETO'
        ]
        
        return self._buscar_total(cuentas, a√±o, patrones)
    
    def _identificar_bases_flujo(self, cuentas: List[Dict], a√±o: int) -> Dict[str, float]:
        """
        Identifica las bases (100%) de cada secci√≥n del flujo de efectivo
        
        Args:
            cuentas: Lista de cuentas del estado de flujo
            a√±o: A√±o a analizar
        
        Returns:
            Dict con las bases encontradas por secci√≥n
        """
        bases = {}
        
        for cuenta in cuentas:
            nombre_upper = cuenta['nombre'].upper().strip()
            
            # Detectar base de Actividades de Operaci√≥n
            if 'ACTIVIDADES DE OPERACION' in nombre_upper or 'ACTIVIDADES DE OPERACI√ìN' in nombre_upper:
                if 'FLUJOS DE EFECTIVO' in nombre_upper and 'PROCEDENTE' in nombre_upper:
                    bases['operacion'] = cuenta['valores'].get(a√±o, 0)
            
            # Detectar base de Actividades de Inversi√≥n
            elif 'ACTIVIDADES DE INVERSION' in nombre_upper or 'ACTIVIDADES DE INVERSI√ìN' in nombre_upper:
                if 'FLUJOS DE EFECTIVO' in nombre_upper and 'PROCEDENTE' in nombre_upper:
                    bases['inversion'] = cuenta['valores'].get(a√±o, 0)
            
            # Detectar base de Actividades de Financiaci√≥n/Financiamiento
            elif 'ACTIVIDADES DE FINANCIACION' in nombre_upper or 'ACTIVIDADES DE FINANCIAMIENTO' in nombre_upper:
                if 'FLUJOS DE EFECTIVO' in nombre_upper and 'PROCEDENTE' in nombre_upper:
                    bases['financiacion'] = cuenta['valores'].get(a√±o, 0)
        
        return bases
    
    def _es_base_flujo(self, nombre_upper: str) -> bool:
        """
        Verifica si una cuenta es una base (total de secci√≥n) en el flujo de efectivo
        
        Args:
            nombre_upper: Nombre de la cuenta en may√∫sculas
        
        Returns:
            True si es una base de secci√≥n
        """
        # Patrones que indican que es una base (total de secci√≥n)
        # Formato POST-2010 (‚â•2010)
        patrones_base_post_2010 = [
            r'FLUJOS DE EFECTIVO.*PROCEDENTE.*ACTIVIDADES DE OPERACI[O√ì]N',
            r'FLUJOS DE EFECTIVO.*PROCEDENTE.*ACTIVIDADES DE INVERSI[O√ì]N',
            r'FLUJOS DE EFECTIVO.*PROCEDENTE.*ACTIVIDADES DE FINANCIACI[O√ì]N',
            r'FLUJOS DE EFECTIVO.*PROCEDENTE.*ACTIVIDADES DE FINANCIAMIENTO',
            r'FLUJOS DE EFECTIVO.*UTILIZAD[OA]S EN.*ACTIVIDADES DE OPERACI[O√ì]N',
            r'FLUJOS DE EFECTIVO.*UTILIZAD[OA]S EN.*ACTIVIDADES DE INVERSI[O√ì]N',
            r'FLUJOS DE EFECTIVO.*UTILIZAD[OA]S EN.*ACTIVIDADES DE FINANCIACI[O√ì]N',
            r'FLUJOS DE EFECTIVO.*UTILIZAD[OA]S EN.*ACTIVIDADES DE FINANCIAMIENTO'
        ]
        
        # Formato PRE-2010 (‚â§2009)
        patrones_base_pre_2010 = [
            r'AUMENTO.*EFECTIVO.*PROVENIENTES DE ACTIVIDADES DE OPERACI[O√ì]N',
            r'AUMENTO.*EFECTIVO.*PROVENIENTES DE ACTIVIDADES DE INVERSI[O√ì]N',
            r'AUMENTO.*EFECTIVO.*PROVENIENTES DE ACTIVIDADES DE FINANCIACI[O√ì]N',
            r'AUMENTO.*EFECTIVO.*PROVENIENTES DE ACTIVIDADES DE FINANCIAMIENTO',
            r'DISMINUCI[O√ì]N.*EFECTIVO.*PROVENIENTES DE ACTIVIDADES DE OPERACI[O√ì]N',
            r'DISMINUCI[O√ì]N.*EFECTIVO.*PROVENIENTES DE ACTIVIDADES DE INVERSI[O√ì]N',
            r'DISMINUCI[O√ì]N.*EFECTIVO.*PROVENIENTES DE ACTIVIDADES DE FINANCIACI[O√ì]N',
            r'DISMINUCI[O√ì]N.*EFECTIVO.*PROVENIENTES DE ACTIVIDADES DE FINANCIAMIENTO'
        ]
        
        # Combinar todos los patrones
        todos_patrones = patrones_base_post_2010 + patrones_base_pre_2010
        
        for patron in todos_patrones:
            if re.search(patron, nombre_upper):
                return True
        
        return False
    
    def _es_total_activos(self, nombre: str, es_pre_2010: bool = False) -> bool:
        """
        Verifica si la cuenta es TOTAL ACTIVOS
        
        Args:
            nombre: Nombre de la cuenta en may√∫sculas
            es_pre_2010: True si es formato ‚â§2009, False si es ‚â•2010
        """
        if es_pre_2010:
            # Para a√±os ‚â§2009: "TOTAL ACTIVO" (singular)
            patrones = [
                r'^TOTAL\s+ACTIVO\s*$',
                r'^TOTAL\s+DEL\s+ACTIVO\s*$',
            ]
        else:
            # Para a√±os ‚â•2010: "TOTAL ACTIVOS" (plural)
            patrones = [
                r'^TOTAL\s+ACTIVOS\s*$',
                r'^TOTAL\s+DE\s+ACTIVOS\s*$',
                r'^ACTIVOS\s+TOTALES\s*$',
                r'^TOTAL\s+DE\s+LOS\s+ACTIVOS\s*$'
            ]
        
        for patron in patrones:
            if re.match(patron, nombre):
                return True
        return False
    
    def _es_total_pasivos(self, nombre: str, es_pre_2010: bool = False) -> bool:
        """
        Verifica si la cuenta es Total Pasivos
        
        Args:
            nombre: Nombre de la cuenta en may√∫sculas
            es_pre_2010: True si es formato ‚â§2009, False si es ‚â•2010
        """
        if es_pre_2010:
            # Para a√±os ‚â§2009: "TOTAL PASIVO" (singular)
            # IMPORTANTE: NO incluir "PASIVO Y PATRIMONIO" aqu√≠ porque es el t√≠tulo de secci√≥n
            patrones = [
                r'^TOTAL\s+PASIVO\s*$',
                r'^TOTAL\s+DEL\s+PASIVO\s*$',
            ]
        else:
            # Para a√±os ‚â•2010: "TOTAL PASIVOS" (plural)
            patrones = [
                r'^TOTAL\s+PASIVOS\s*$',
                r'^TOTAL\s+DE\s+PASIVOS\s*$',
                r'^PASIVOS\s+TOTALES\s*$',
                r'^TOTAL\s+DE\s+LOS\s+PASIVOS\s*$'
            ]
        
        for patron in patrones:
            if re.match(patron, nombre):
                return True
        return False
    
    def _generar_resumen(self, resultados: Dict) -> Dict[str, Any]:
        """Genera un resumen del an√°lisis vertical"""
        resumen = {
            'total_estados_analizados': len(resultados['estados_analizados']),
            'estados': []
        }
        
        for clave, estado in resultados['estados_analizados'].items():
            resumen['estados'].append({
                'tipo': clave,
                'nombre': estado.get('nombre_estado', ''),
                'a√±o': estado.get('a√±o_analisis', 0)
            })
        
        return resumen
    
    def exportar_a_excel(self, resultados: Dict, archivo_salida: str):
        """
        Exporta los resultados del an√°lisis vertical a Excel con formato
        """
        with pd.ExcelWriter(archivo_salida, engine='openpyxl') as writer:
            
            # Hoja 1: Metadatos
            df_meta = pd.DataFrame([{
                'Empresa': resultados['empresa'],
                'A√±o': resultados['a√±o_documento'],
                'Tipo': resultados['tipo'],
                'Formato': resultados['formato'].upper()
            }])
            df_meta.to_excel(writer, sheet_name='Informaci√≥n', index=False)
            
            # Hoja 2: Balance - Activos
            if 'balance' in resultados['estados_analizados']:
                balance = resultados['estados_analizados']['balance']
                
                if balance['activos']:
                    df_activos = pd.DataFrame(balance['activos'])
                    df_activos['analisis_vertical'] = df_activos['analisis_vertical'].round(2)
                    df_activos.to_excel(writer, sheet_name='Activos', index=False)
                
                # Hoja 3: Balance - Pasivos
                if balance['pasivos']:
                    df_pasivos = pd.DataFrame(balance['pasivos'])
                    df_pasivos['analisis_vertical'] = df_pasivos['analisis_vertical'].round(2)
                    df_pasivos.to_excel(writer, sheet_name='Pasivos', index=False)
            
            # Hoja 4: Estado de Resultados
            if 'resultados' in resultados['estados_analizados']:
                resultados_estado = resultados['estados_analizados']['resultados']
                if resultados_estado['cuentas_analizadas']:
                    df_resultados = pd.DataFrame(resultados_estado['cuentas_analizadas'])
                    df_resultados['analisis_vertical'] = df_resultados['analisis_vertical'].round(2)
                    df_resultados.to_excel(writer, sheet_name='Resultados', index=False)
            
            # Hoja 5: Flujo de Efectivo
            if 'flujo' in resultados['estados_analizados']:
                flujo = resultados['estados_analizados']['flujo']
                if flujo['cuentas_analizadas']:
                    df_flujo = pd.DataFrame(flujo['cuentas_analizadas'])
                    df_flujo['analisis_vertical'] = df_flujo['analisis_vertical'].round(2)
                    df_flujo.to_excel(writer, sheet_name='Flujo Efectivo', index=False)
        
        print(f"‚úÖ An√°lisis exportado a: {archivo_salida}")


# Funci√≥n de uso r√°pido
def analizar_archivo_html(ruta_archivo: str, exportar: bool = True) -> Dict:
    """
    Analiza un archivo HTML y genera an√°lisis vertical
    
    Args:
        ruta_archivo: Ruta al archivo HTML
        exportar: Si True, exporta a Excel autom√°ticamente
    
    Returns:
        Dict con resultados del an√°lisis
    """
    from extractor_estados_mejorado import extraer_estados_desde_archivo
    
    # Extraer estados financieros
    print(f"üìÑ Procesando: {ruta_archivo}")
    resultados_extractor = extraer_estados_desde_archivo(ruta_archivo)
    
    # Realizar an√°lisis vertical
    analizador = AnalisisVerticalMejorado()
    resultados_analisis = analizador.analizar_desde_extractor(resultados_extractor)
    
    # Exportar a Excel si se solicita
    if exportar:
        import os
        nombre_base = os.path.basename(ruta_archivo).split('.')[0]
        archivo_salida = f"analisis_vertical_{nombre_base}.xlsx"
        analizador.exportar_a_excel(resultados_analisis, archivo_salida)
    
    return resultados_analisis


if __name__ == "__main__":
    print("="*70)
    print("üìä AN√ÅLISIS VERTICAL MEJORADO - DEMOSTRACI√ìN")
    print("="*70)
    
    # Ejemplo 1: Archivo 2004 (Pre-2010)
    print("\nüîπ Ejemplo 1: Archivo 2004 (Formato Pre-2010)")
    print("-"*70)
    analisis_2004 = analizar_archivo_html(
        "ejemplos/ReporteDetalleInformacionFinanciero (6).html"
    )
    
    print("\n" + "="*70)
    
    # Ejemplo 2: Archivo 2024 (Post-2010)
    print("\nüîπ Ejemplo 2: Archivo 2024 (Formato Post-2010)")
    print("-"*70)
    analisis_2024 = analizar_archivo_html(
        "ejemplos/REPORTE DETALLE FINANCIERO 2024.html"
    )
    
    print("\n" + "="*70)
    print("‚úÖ DEMOSTRACI√ìN COMPLETADA")
    print("="*70)
