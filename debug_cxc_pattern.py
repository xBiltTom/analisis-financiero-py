"""
Debug script para analizar el patr√≥n de K y F en cada a√±o
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from extractor_estados_mejorado import ExtractorEstadosFinancieros

def debug_cxc_por_a√±o():
    """Analiza las apariciones de Cuentas por Cobrar en cada a√±o"""
    
    print("="*80)
    print("üîç DEBUG: An√°lisis de Cuentas por Cobrar por A√±o")
    print("="*80)
    
    carpeta_cuentas = "cuentas"
    archivos_cuentas = []
    
    if os.path.exists(carpeta_cuentas):
        for archivo in sorted(os.listdir(carpeta_cuentas)):
            if archivo.endswith('.xls'):
                ruta_completa = os.path.join(carpeta_cuentas, archivo)
                archivos_cuentas.append(ruta_completa)
    
    if not archivos_cuentas:
        print("‚ùå No se encontraron archivos")
        return
    
    extractor = ExtractorEstadosFinancieros()
    
    # Procesar cada archivo y mostrar TODAS las cuentas por cobrar
    for archivo in archivos_cuentas:
        try:
            with open(archivo, 'r', encoding='utf-8', errors='ignore') as f:
                contenido = f.read()
            
            resultado = extractor.extraer_todos_estados(contenido)
            a√±o = resultado['a√±o_documento']
            
            print(f"\n{'='*80}")
            print(f"üìÖ A√ëO {a√±o}")
            print(f"{'='*80}")
            
            if 'balance' in resultado['estados']:
                balance = resultado['estados']['balance']
                cuentas = balance['cuentas']
                
                print(f"\nüîé Buscando 'Cuentas por Cobrar' en Balance (Total: {len(cuentas)} cuentas)")
                print("-" * 80)
                
                contador = 0
                for i, cuenta in enumerate(cuentas):
                    nombre = cuenta['nombre'].upper()
                    
                    # Buscar cualquier menci√≥n de "CUENTAS POR COBRAR"
                    if 'CUENTAS' in nombre and 'COBRAR' in nombre:
                        contador += 1
                        valores = cuenta['valores']
                        
                        # Obtener valores del a√±o actual y anterior
                        val_actual = valores.get(a√±o) or valores.get(str(a√±o)) or 0
                        
                        # Buscar a√±o anterior
                        a√±o_ant = a√±o - 1
                        val_anterior = valores.get(a√±o_ant) or valores.get(str(a√±o_ant)) or 0
                        
                        print(f"\n#{contador} [Posici√≥n {i+1}]: {cuenta['nombre']}")
                        print(f"    {a√±o}: {abs(val_actual):,.0f}")
                        print(f"    {a√±o_ant}: {abs(val_anterior):,.0f}")
                        print(f"    Tiene 'Y OTRAS': {'Y OTRAS' in nombre}")
            
            # Mostrar Ingresos Ordinarios
            if 'resultados' in resultado['estados']:
                resultados = resultado['estados']['resultados']
                cuentas_res = resultados['cuentas']
                
                print(f"\nüí∞ Ingresos de Actividades Ordinarias:")
                print("-" * 80)
                
                for cuenta in cuentas_res:
                    nombre = cuenta['nombre'].upper()
                    if 'INGRESOS' in nombre and 'ACTIVIDADES' in nombre and 'ORDINARIAS' in nombre:
                        valores = cuenta['valores']
                        val = valores.get(a√±o) or valores.get(str(a√±o)) or 0
                        print(f"G ({a√±o}): {abs(val):,.0f}")
                        break
                        
        except Exception as e:
            print(f"‚ùå Error procesando {archivo}: {e}")
    
    print(f"\n{'='*80}")
    print("‚úÖ An√°lisis completado")
    print(f"{'='*80}")

if __name__ == "__main__":
    debug_cxc_por_a√±o()
