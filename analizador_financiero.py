import streamlit as st
import pandas as pd
import os
import tempfile
import shutil
from pathlib import Path
import re
from bs4 import BeautifulSoup
import numpy as np
# import chardet  # No se usa en el c√≥digo
from typing import Dict, List, Tuple, Any
from analisis_vertical_horizontal import AnalisisVerticalHorizontal
from extractor_estados_mejorado import ExtractorEstadosFinancieros
from analisis_vertical_mejorado import AnalisisVerticalMejorado
from analisis_horizontal_mejorado import AnalisisHorizontalMejorado
from analisis_vertical_consolidado import AnalisisVerticalConsolidado
from analisis_horizontal_consolidado import AnalisisHorizontalConsolidado
from ratios_financieros import CalculadorRatiosFinancieros
from groq import Groq

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Analizador Financiero",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

def analizar_ratios_con_ia(resultados_ratios: Dict[str, Any], empresa: str) -> str:
    """
    Analiza los ratios financieros usando el modelo de IA de Groq en 3 solicitudes especializadas
    
    Args:
        resultados_ratios: Diccionario con los ratios calculados
        empresa: Nombre de la empresa
    
    Returns:
        str: An√°lisis completo generado por la IA (combinaci√≥n de 3 an√°lisis)
    """
    try:
        # Inicializar cliente Groq con API key
        client = Groq(api_key="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")
        
        # Preparar datos de ratios
        a√±os = sorted(resultados_ratios['a√±os'])
        ratios_por_a√±o = resultados_ratios['ratios_por_a√±o']
        
        # ==================== SOLICITUD 1: LIQUIDEZ Y ENDEUDAMIENTO ====================
        prompt1 = f"""Eres un analista financiero experto. Analiza √öNICAMENTE los ratios de LIQUIDEZ y ENDEUDAMIENTO de {empresa}.

**EMPRESA:** {empresa}
**A√ëOS:** {', '.join(map(str, a√±os))}

**DATOS DE LIQUIDEZ Y ENDEUDAMIENTO:**
"""
        for a√±o in a√±os:
            ratios = ratios_por_a√±o[a√±o]
            prompt1 += f"\n**{a√±o}:**\n"
            prompt1 += f"‚Ä¢ Liquidez Corriente: {ratios.get('liquidez_corriente', 'N/A')}\n"
            prompt1 += f"‚Ä¢ Prueba √Åcida: {ratios.get('prueba_acida', 'N/A')}\n"
            prompt1 += f"‚Ä¢ Raz√≥n Deuda Total: {ratios.get('razon_deuda_total', 'N/A')}\n"
            prompt1 += f"‚Ä¢ Raz√≥n Deuda/Patrimonio: {ratios.get('razon_deuda_patrimonio', 'N/A')}\n"
        
        prompt1 += """
**INSTRUCCIONES:**
- Analiza SOLO liquidez y endeudamiento (NO menciones rentabilidad ni actividad)
- S√© espec√≠fico con los n√∫meros y proporciona an√°lisis DETALLADO
- Identifica tendencias, alertas y explica sus causas probables
- Proporciona contexto comparativo entre a√±os
- M√°ximo 15-18 l√≠neas

**ESTRUCTURA:**
1. **LIQUIDEZ** (8-9 l√≠neas): Analiza Liquidez Corriente y Prueba √Åcida. ¬øPuede pagar obligaciones a corto plazo? ¬øC√≥mo ha evolucionado? ¬øQu√© significa cada cambio? ¬øEs saludable para la industria?
2. **ENDEUDAMIENTO** (7-9 l√≠neas): Analiza Raz√≥n Deuda Total y Deuda/Patrimonio. ¬øNivel de riesgo? ¬øApalancamiento adecuado? ¬øTendencia? ¬øC√≥mo afecta la capacidad de endeudamiento futuro? ¬øAlertas espec√≠ficas?
"""
        
        # ==================== SOLICITUD 2: RENTABILIDAD Y ACTIVIDAD ====================
        prompt2 = f"""Eres un analista financiero experto. Analiza √öNICAMENTE los ratios de RENTABILIDAD y ACTIVIDAD de {empresa}.

**EMPRESA:** {empresa}
**A√ëOS:** {', '.join(map(str, a√±os))}

**DATOS DE RENTABILIDAD Y ACTIVIDAD:**
"""
        for a√±o in a√±os:
            ratios = ratios_por_a√±o[a√±o]
            prompt2 += f"\n**{a√±o}:**\n"
            prompt2 += f"‚Ä¢ Margen Neto: {ratios.get('margen_neto', 'N/A')}\n"
            prompt2 += f"‚Ä¢ ROA: {ratios.get('roa', 'N/A')}\n"
            prompt2 += f"‚Ä¢ ROE: {ratios.get('roe', 'N/A')}\n"
            prompt2 += f"‚Ä¢ Rotaci√≥n Activos Totales: {ratios.get('rotacion_activos_totales', 'N/A')}\n"
            prompt2 += f"‚Ä¢ Rotaci√≥n CxC: {ratios.get('rotacion_cuentas_cobrar', 'N/A')}\n"
            prompt2 += f"‚Ä¢ Rotaci√≥n Inventarios: {ratios.get('rotacion_inventarios', 'N/A')}\n"
        
        prompt2 += """
**INSTRUCCIONES:**
- Analiza SOLO rentabilidad y actividad (NO menciones liquidez ni endeudamiento)
- S√© espec√≠fico con los n√∫meros y proporciona an√°lisis DETALLADO
- Identifica si genera valor para accionistas y explica por qu√©
- Compara entre a√±os y explica cambios significativos
- M√°ximo 18-20 l√≠neas

**ESTRUCTURA:**
1. **RENTABILIDAD** (9-10 l√≠neas): Analiza Margen Neto, ROA y ROE. ¬øGenera ganancias suficientes? ¬øC√≥mo ha evolucionado cada indicador? ¬øEl retorno es adecuado para los accionistas? ¬øQu√© factores pueden estar influyendo? ¬øComparaci√≥n con tendencias del sector?
2. **EFICIENCIA OPERATIVA** (9-10 l√≠neas): Analiza rotaciones de activos, CxC e inventarios. ¬øUso eficiente de recursos? ¬øQu√© indican las rotaciones sobre la gesti√≥n operativa? ¬øProblemas de cobranza o inventarios obsoletos? ¬øTendencia de mejora o deterioro?
"""
        
        # ==================== SOLICITUD 3: CONCLUSI√ìN GENERAL ====================
        prompt3 = f"""Eres un analista financiero experto. Genera una CONCLUSI√ìN GENERAL integradora sobre {empresa}.

**EMPRESA:** {empresa}
**A√ëOS:** {', '.join(map(str, a√±os))}

**RESUMEN DE TODOS LOS RATIOS:**
"""
        for a√±o in a√±os:
            ratios = ratios_por_a√±o[a√±o]
            prompt3 += f"\n**{a√±o}:** Liquidez={ratios.get('liquidez_corriente', 'N/A')}, Deuda={ratios.get('razon_deuda_total', 'N/A')}, ROE={ratios.get('roe', 'N/A')}, Rotaci√≥n={ratios.get('rotacion_activos_totales', 'N/A')}\n"
        
        prompt3 += """
**INSTRUCCIONES:**
- Integra TODOS los aspectos: liquidez, endeudamiento, rentabilidad y eficiencia
- Identifica el PATR√ìN GENERAL entre a√±os con an√°lisis PROFUNDO
- Eval√∫a salud financiera GLOBAL y perspectivas futuras
- Proporciona 3-4 RECOMENDACIONES espec√≠ficas, accionables y priorizadas
- M√°ximo 15-18 l√≠neas

**ESTRUCTURA:**
1. **DIAGN√ìSTICO INTEGRAL** (6-7 l√≠neas): ¬øC√≥mo est√° la empresa en general? ¬øFortalezas principales? ¬øDebilidades cr√≠ticas? ¬øBalance entre liquidez, rentabilidad y eficiencia? ¬øPosici√≥n competitiva probable?
2. **TENDENCIA GLOBAL** (4-5 l√≠neas): ¬øMejorando o deterior√°ndose? ¬øSostenible a mediano plazo? ¬øRiesgos principales? ¬øOportunidades visibles?
3. **RECOMENDACIONES ESTRAT√âGICAS** (5-6 l√≠neas): 3-4 acciones concretas prioritarias con justificaci√≥n breve. ¬øQu√© hacer primero? ¬øQu√© evitar?
"""
        
        # Realizar las 3 solicitudes
        analisis_partes = []
        
        # PARTE 1: Liquidez y Endeudamiento
        completion1 = client.chat.completions.create(
            model="openai/gpt-oss-20b",
            messages=[
                {
                    "role": "system",
                    "content": "Eres un analista financiero experto en an√°lisis de liquidez y endeudamiento. Proporciona an√°lisis DETALLADOS y espec√≠ficos centrados √öNICAMENTE en estos aspectos. Explica causas, consecuencias y contexto."
                },
                {
                    "role": "user",
                    "content": prompt1
                }
            ],
            temperature=0.6,
            max_tokens=2500,
            top_p=0.9
        )
        analisis_partes.append(completion1.choices[0].message.content)
        
        # PARTE 2: Rentabilidad y Actividad
        completion2 = client.chat.completions.create(
            model="openai/gpt-oss-20b",
            messages=[
                {
                    "role": "system",
                    "content": "Eres un analista financiero experto en rentabilidad y eficiencia operativa. Proporciona an√°lisis DETALLADOS y espec√≠ficos centrados √öNICAMENTE en estos aspectos. Explica causas, impactos y comparaciones."
                },
                {
                    "role": "user",
                    "content": prompt2
                }
            ],
            temperature=0.6,
            max_tokens=2800,
            top_p=0.9
        )
        analisis_partes.append(completion2.choices[0].message.content)
        
        # PARTE 3: Conclusi√≥n General
        completion3 = client.chat.completions.create(
            model="openai/gpt-oss-20b",
            messages=[
                {
                    "role": "system",
                    "content": "Eres un analista financiero senior que integra todos los aspectos financieros para dar un diagn√≥stico completo y recomendaciones estrat√©gicas. Proporciona an√°lisis PROFUNDO con visi√≥n hol√≠stica y recomendaciones priorizadas."
                },
                {
                    "role": "user",
                    "content": prompt3
                }
            ],
            temperature=0.6,
            max_tokens=2500,
            top_p=0.9
        )
        analisis_partes.append(completion3.choices[0].message.content)
        
        # Combinar los 3 an√°lisis
        analisis_completo = f"""# AN√ÅLISIS FINANCIERO INTEGRAL - {empresa}

## üìä PARTE 1: AN√ÅLISIS DE LIQUIDEZ Y ENDEUDAMIENTO

{analisis_partes[0]}

---

## üí∞ PARTE 2: AN√ÅLISIS DE RENTABILIDAD Y EFICIENCIA

{analisis_partes[1]}

---

## üéØ PARTE 3: CONCLUSI√ìN GENERAL Y RECOMENDACIONES

{analisis_partes[2]}

---

*An√°lisis generado mediante IA (OpenAI GPT-4o-mini via Groq) en 3 fases especializadas*
"""
        
        return analisis_completo
        
    except Exception as e:
        return f"‚ùå Error al generar an√°lisis con IA: {str(e)}"

class AnalizadorFinanciero:
    def __init__(self):
        self.temp_dir = "temp"
        self.crear_directorio_temporal()
        self.palabras_clave = self.cargar_diccionario_palabras_clave()
        self.extractor_mejorado = ExtractorEstadosFinancieros()  # ‚ú® Nuevo extractor mejorado
        self.analizador_vertical = AnalisisVerticalMejorado()  # ‚ú® Nuevo analizador vertical
        self.analizador_horizontal = AnalisisHorizontalMejorado()  # ‚ú® Nuevo analizador horizontal
        self.consolidador_vertical = AnalisisVerticalConsolidado()  # ‚ú® Consolidador vertical
        self.consolidador_horizontal = AnalisisHorizontalConsolidado()  # ‚ú® Consolidador horizontal
        self.calculador_ratios = CalculadorRatiosFinancieros()  # ‚ú® Calculador de ratios financieros
        
    def crear_directorio_temporal(self):
        """Crear directorio temporal para almacenar archivos"""
        if not os.path.exists(self.temp_dir):
            os.makedirs(self.temp_dir)
    
    def cargar_diccionario_palabras_clave(self) -> Dict[str, List[str]]:
        """Cargar el diccionario de palabras clave para an√°lisis financiero"""
        return {
            "activos": [
                "activos corrientes", "activo corriente", "activos no corrientes", 
                "activo no corriente", "efectivo y equivalentes", "caja y bancos",
                "valores negociables", "cuentas por cobrar comerciales", "cuentas por cobrar",
                "inventarios", "existencias", "propiedades, planta y equipo",
                "inmuebles, maquinaria y equipo", "activos intangibles", "inversiones",
                "activos biol√≥gicos", "total activos"
            ],
            "pasivos": [
                "pasivos corrientes", "pasivo corriente", "pasivos no corrientes",
                "pasivo no corriente", "pr√©stamos bancarios", "cuentas por pagar comerciales",
                "cuentas por pagar", "deudas a largo plazo", "obligaciones financieras",
                "ingresos diferidos", "provisiones", "total pasivos"
            ],
            "patrimonio": [
                "patrimonio", "patrimonio neto", "capital", "capital emitido",
                "capital adicional", "primas de emisi√≥n", "acciones de inversi√≥n",
                "resultados acumulados", "reservas", "reservas legales",
                "excedente de revaluaci√≥n", "super√°vit de revaluaci√≥n", "total patrimonio"
            ],
            "estado_resultados": [
                "ingresos", "ventas netas", "ingresos operacionales",
                "ingresos de actividades ordinarias", "costo de ventas", "costo operacional",
                "utilidad bruta", "ganancia bruta", "gastos operacionales",
                "gastos de ventas", "gastos de administraci√≥n", "utilidad operativa",
                "ganancia operativa", "resultado operativo", "ingresos financieros",
                "gastos financieros", "utilidad neta", "ganancia neta", "p√©rdida neta",
                "resultado del ejercicio"
            ],
            "flujo_efectivo": [
                "flujo de efectivo de operaci√≥n", "actividades de operaci√≥n",
                "flujo de efectivo de inversi√≥n", "actividades de inversi√≥n",
                "flujo de efectivo de financiamiento", "actividades de financiaci√≥n",
                "efectivo neto"
            ],
            "a√±os": ["2024", "2023", "2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015"],
            "totales": [
                "total activos", "total pasivos", "total patrimonio", "total pasivo y patrimonio",
                "total ingresos", "total gastos", "total costo"
            ]
        }
    
    def convertir_xls_a_html(self, archivo_xls: str) -> str:
        """Convertir archivo XLS a HTML (solo cambiar extensi√≥n)"""
        try:
            # Crear nombre del archivo HTML
            nombre_base = Path(archivo_xls).stem
            archivo_html = os.path.join(self.temp_dir, f"{nombre_base}.html")
            
            # Copiar el archivo XLS y guardarlo como HTML
            # El archivo XLS original ya tiene formato HTML
            shutil.copy2(archivo_xls, archivo_html)
            
            return archivo_html
        except Exception as e:
            st.error(f"Error al convertir XLS a HTML: {str(e)}")
            return None
    
    def extraer_datos_html(self, archivo_html: str) -> Tuple[Dict[str, Any], Dict[str, Any]]:
        """
        Extraer datos importantes del archivo HTML usando el EXTRACTOR MEJORADO
        
        ‚ú® NUEVO: Usa extractor_estados_mejorado.py para extracci√≥n precisa de bloques
        
        Returns:
            Tuple con (datos_legacy, resultados_extractor_mejorado)
        """
        try:
            st.info("üîç Usando Extractor Mejorado con detecci√≥n autom√°tica de formato...")
            
            # Leer archivo HTML
            with open(archivo_html, 'r', encoding='utf-8', errors='ignore') as f:
                html_content = f.read()
            
            # ‚ú® USAR EL NUEVO EXTRACTOR MEJORADO
            resultados_mejorados = self.extractor_mejorado.extraer_todos_estados(html_content)
            
            # Mostrar informaci√≥n de extracci√≥n
            a√±o_doc = resultados_mejorados['a√±o_documento']
            formato = resultados_mejorados['formato']
            st.success(f"üìÖ A√±o detectado: {a√±o_doc} | üìã Formato: {formato.upper()}")
            
            # Convertir resultados del nuevo extractor al formato esperado por el resto del c√≥digo
            datos_extraidos = self._convertir_formato_mejorado_a_legacy(resultados_mejorados)
            
            # Mostrar resumen de extracci√≥n
            if resultados_mejorados['estados']:
                st.info(f"‚úÖ Estados extra√≠dos: {len(resultados_mejorados['estados'])}")
                for key, estado in resultados_mejorados['estados'].items():
                    st.write(f"   üìä {estado['nombre']}: {estado['total_cuentas']} cuentas")
            
            # Mostrar validaci√≥n de equilibrio
            if 'equilibrio_contable' in resultados_mejorados['validaciones']:
                validacion = resultados_mejorados['validaciones']['equilibrio_contable']
                if validacion['es_valido']:
                    st.success(f"‚úÖ Equilibrio contable v√°lido (diferencia: {validacion['diferencia']:,.2f})")
                else:
                    st.warning(f"‚ö†Ô∏è Equilibrio contable con diferencia de {validacion['diferencia']:,.2f}")
            
            # Mostrar errores si los hay
            if resultados_mejorados['errores']:
                st.warning("‚ö†Ô∏è Advertencias durante la extracci√≥n:")
                for error in resultados_mejorados['errores']:
                    st.write(f"   ‚Ä¢ {error}")
            
            # Retornar AMBOS formatos
            return datos_extraidos, resultados_mejorados
            
        except Exception as e:
            st.error(f"‚ùå Error al extraer datos con extractor mejorado: {str(e)}")
            import traceback
            st.error(traceback.format_exc())
            return {}, {}
    
    def _convertir_formato_mejorado_a_legacy(self, resultados_mejorados: Dict) -> Dict[str, Any]:
        """
        Convierte el formato del extractor mejorado al formato legacy esperado por el c√≥digo existente
        
        Args:
            resultados_mejorados: Resultados del extractor mejorado
            
        Returns:
            Dict en formato legacy compatible con analisis_vertical_horizontal.py
        """
        a√±o_doc = resultados_mejorados['a√±o_documento']
        estados_mejorados = resultados_mejorados['estados']
        metadatos_mejorados = resultados_mejorados.get('metadatos', {})
        
        # Crear estructura legacy con metadatos mejorados
        datos_legacy = {
            'a√±o_documento': a√±o_doc,
            'metadatos': {
                'a√±o': str(a√±o_doc),
                'formato': resultados_mejorados['formato'],
                'empresa': metadatos_mejorados.get('empresa', 'No identificada'),
                'tipo': metadatos_mejorados.get('tipo', 'No especificado'),
                'periodo': metadatos_mejorados.get('periodo', 'No especificado')
            },
            'a√±os_disponibles': [],
            'estados_financieros': {},
            'cabeceras_columnas': []
        }
        
        # Extraer a√±os disponibles de las cuentas
        a√±os_set = set()
        for estado in estados_mejorados.values():
            for cuenta in estado['cuentas']:
                a√±os_set.update(cuenta['valores'].keys())
        datos_legacy['a√±os_disponibles'] = sorted(a√±os_set, reverse=True)
        datos_legacy['cabeceras_columnas'] = ['Cuenta', 'NOTA'] + datos_legacy['a√±os_disponibles']
        
        # Mapear estados mejorados a formato legacy
        mapeo_estados = {
            'balance': 'estado_situacion_financiera' if a√±o_doc >= 2010 else 'balance_general',
            'resultados': 'estado_resultados' if a√±o_doc >= 2010 else 'estado_ganancias_perdidas',
            'patrimonio': 'estado_cambios_patrimonio',
            'flujo': 'estado_flujo_efectivo',
            'integrales': 'estado_resultados_integrales'
        }
        
        # Convertir cada estado
        for key_mejorado, nombre_legacy in mapeo_estados.items():
            if key_mejorado in estados_mejorados:
                estado_mejorado = estados_mejorados[key_mejorado]
                
                # Convertir cuentas al formato legacy
                cuentas_legacy = []
                for cuenta in estado_mejorado['cuentas']:
                    # ‚ú® NUEVO: Para patrimonio, incluir CCUENTA si existe
                    if 'ccuenta' in cuenta:
                        cuenta_legacy = {
                            'ccuenta': cuenta.get('ccuenta', ''),
                            'cuenta': cuenta['nombre'],
                            'es_total': cuenta['es_total']
                        }
                    else:
                        cuenta_legacy = {
                            'cuenta': cuenta['nombre'],
                            'es_total': cuenta['es_total']
                        }
                    
                    # Agregar valores por a√±o
                    for a√±o in datos_legacy['a√±os_disponibles']:
                        valor = cuenta['valores'].get(a√±o, 0.0)
                        cuenta_legacy[a√±o] = {
                            'numero': valor,
                            'texto': self._formatear_numero(valor)
                        }
                    
                    cuentas_legacy.append(cuenta_legacy)
                
                # Agregar estado al diccionario legacy
                datos_legacy['estados_financieros'][nombre_legacy] = {
                    'nombre': estado_mejorado['nombre'],
                    'a√±os': estado_mejorado['a√±os'],
                    'datos': cuentas_legacy,
                    'total_cuentas': estado_mejorado['total_cuentas'],
                    'columnas_especiales': estado_mejorado.get('columnas_especiales', None)  # ‚ú® NUEVO
                }
        
        return datos_legacy
    
    def _formatear_numero(self, valor: float) -> str:
        """Formatea un n√∫mero float al formato de texto esperado"""
        if valor == 0:
            return '0'
        elif valor < 0:
            return f"({abs(valor):,.0f})"
        else:
            return f"{valor:,.0f}"
    
    def extraer_metadatos(self, soup: BeautifulSoup) -> Dict[str, str]:
        """Extraer metadatos del documento - MEJORADO para a√±os ‚â§2009"""
        metadatos = {}
        
        # Buscar informaci√≥n de la empresa
        texto_completo = soup.get_text().lower()
        
        # Buscar a√±o - m√∫ltiples patrones
        a√±os_encontrados = re.findall(r'\ba√±o:\s*(\d{4})', texto_completo)
        if not a√±os_encontrados:
            # Buscar a√±os en divs espec√≠ficos
            a√±os_encontrados = re.findall(r'<div>a[√±n]o:\s*(\d{4})', str(soup).lower())
        if not a√±os_encontrados:
            # Buscar el primer a√±o que aparezca en el documento
            a√±os_regex = re.findall(r'\b(19[9]\d|20[0-3]\d)\b', texto_completo)
            if a√±os_regex:
                a√±os_encontrados = [a√±os_regex[0]]  # Tomar el primer a√±o encontrado
        
        if a√±os_encontrados:
            metadatos['a√±o'] = a√±os_encontrados[0]
        
        # Buscar empresa - m√∫ltiples patrones
        empresa_match = re.search(r'empresa:\s*([^\n\r<>]+)', texto_completo)
        if not empresa_match:
            # Buscar en divs espec√≠ficos
            empresa_match = re.search(r'<div>empresa:\s*([^\n\r<>]+)', str(soup).lower())
        if not empresa_match:
            # Buscar nombres de empresas t√≠picos
            empresa_match = re.search(r'(compa√±[√≠i]a\s+[^<>\n\r]+s\.?a\.?)', texto_completo)
        
        if empresa_match:
            metadatos['empresa'] = empresa_match.group(1).strip()
        
        # Buscar tipo de reporte - m√∫ltiples patrones
        tipo_match = re.search(r'tipo:\s*([^\n\r<>]+)', texto_completo)
        if not tipo_match:
            tipo_match = re.search(r'<div>tipo:\s*([^\n\r<>]+)', str(soup).lower())
        if not tipo_match:
            # Si encuentra "balance general" o similar, usar como tipo
            if 'balance general' in texto_completo:
                metadatos['tipo'] = 'Balance General'
            elif 'estados financieros' in texto_completo:
                metadatos['tipo'] = 'Estados Financieros'
        
        if tipo_match:
            metadatos['tipo'] = tipo_match.group(1).strip()
        
        # Buscar per√≠odo - m√∫ltiples patrones
        periodo_match = re.search(r'per[√≠i]odo:\s*([^\n\r<>]+)', texto_completo)
        if not periodo_match:
            periodo_match = re.search(r'<div>per[√≠i]odo:\s*([^\n\r<>]+)', str(soup).lower())
        if not periodo_match:
            # Buscar "anual", "trimestral", etc.
            if 'anual' in texto_completo:
                metadatos['periodo'] = 'Anual'
        
        if periodo_match:
            metadatos['periodo'] = periodo_match.group(1).strip()
        
        return metadatos
    
    def detectar_estados_financieros(self, soup: BeautifulSoup, a√±o_documento: int = None) -> Dict[str, Dict]:
        """Detectar y extraer datos por cada estado financiero seg√∫n el a√±o"""
        
        # Detectar a√±o del documento si no se proporciona
        if a√±o_documento is None:
            a√±os_encontrados = self.encontrar_a√±os(soup)
            if a√±os_encontrados:
                a√±o_documento = int(a√±os_encontrados[0])
            else:
                a√±o_documento = 2020  # Por defecto
        
        # Definir estados financieros seg√∫n el a√±o
        if a√±o_documento <= 2009:
            # Para a√±os 2009 hacia abajo
            estados_financieros = {
                "balance_general": {
                    "nombre": "Balance General",
                    "patrones": [
                        r"balance\s+general",
                        r"estado\s+de\s+situaci[√≥o]n\s+financiera"
                    ],
                    "datos": []
                },
                "estado_ganancias_perdidas": {
                    "nombre": "Estado de Ganancias y P√©rdidas",
                    "patrones": [
                        r"estado\s+de\s+ganancias\s+y\s+p[√©e]rdidas",
                        r"estado\s+de\s+resultados"
                    ],
                    "datos": []
                },
                "estado_cambios_patrimonio": {
                    "nombre": "Estado de Cambios en el Patrimonio Neto",
                    "patrones": [
                        r"estado\s+de\s+cambios\s+en\s+el\s+patrimonio\s+neto",
                        r"estado\s+de\s+cambios\s+en\s+el\s+patrimonio"
                    ],
                    "datos": []
                },
                "estado_flujo_efectivo": {
                    "nombre": "Estado de Flujo de Efectivo",
                    "patrones": [
                        r"estado\s+de\s+flujo\s+de\s+efectivo",
                        r"estado\s+de\s+flujos\s+de\s+efectivo"
                    ],
                    "datos": []
                }
            }
        else:
            # Para a√±os 2010 hacia arriba
            estados_financieros = {
                "estado_situacion_financiera": {
                    "nombre": "Estado de Situaci√≥n Financiera",
                    "patrones": [
                        r"estado\s+de\s+situaci[√≥o]n\s+financiera",
                        r"balance\s+general"
                    ],
                    "datos": []
                },
                "estado_resultados": {
                    "nombre": "Estado de Resultados",
                    "patrones": [
                        r"estado\s+de\s+resultados",
                        r"estado\s+de\s+ganancias\s+y\s+p[√©e]rdidas"
                    ],
                    "datos": []
                },
                "estado_cambios_patrimonio": {
                    "nombre": "Estado de Cambios en el Patrimonio Neto",
                    "patrones": [
                        r"estados?\s+de\s+cambios\s+en\s+el\s+patrimonio\s+neto",
                        r"estado\s+de\s+cambios\s+en\s+el\s+patrimonio"
                    ],
                    "datos": []
                },
                "estado_flujos_efectivo": {
                    "nombre": "Estado de Flujos de Efectivo",
                    "patrones": [
                        r"estado\s+de\s+flujos\s+de\s+efectivo",
                        r"estado\s+de\s+flujo\s+de\s+efectivo"
                    ],
                    "datos": []
                },
                "estado_resultados_integrales": {
                    "nombre": "Estado de Resultados Integrales",
                    "patrones": [
                        r"estado\s+de\s+resultados\s+integrales",
                        r"estado\s+del\s+resultado\s+integral"
                    ],
                    "datos": []
                }
            }
        
        # Buscar tablas y clasificarlas por estado financiero
        tablas = soup.find_all('table')
        
        for tabla in tablas:
            # Buscar el contexto antes de la tabla
            contexto = self.obtener_contexto_tabla(tabla)
            
            # Clasificar la tabla
            estado_identificado = None
            for clave_estado, info_estado in estados_financieros.items():
                for patron in info_estado["patrones"]:
                    if re.search(patron, contexto.lower()):
                        estado_identificado = clave_estado
                        break
                if estado_identificado:
                    break
            
            if estado_identificado:
                # Extraer datos de la tabla
                datos_tabla = self.extraer_datos_tabla(tabla)
                estados_financieros[estado_identificado]["datos"].extend(datos_tabla)
        
        return estados_financieros
    
    def obtener_contexto_tabla(self, tabla) -> str:
        """Obtener el contexto textual alrededor de una tabla"""
        contexto = ""
        
        # Buscar elementos anteriores (t√≠tulos, encabezados)
        for tag in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'div', 'p']:
            elemento_anterior = tabla.find_previous(tag)
            if elemento_anterior:
                texto = elemento_anterior.get_text(strip=True)
                if len(texto) > 5:  # Evitar textos muy cortos
                    contexto += " " + texto
        
        # Tambi√©n buscar en elementos contenedores
        parent = tabla.parent
        while parent and parent.name != 'html':
            if parent.name in ['div', 'section', 'article']:
                # Buscar t√≠tulos en el contenedor
                titulos = parent.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span'], limit=5)
                for titulo in titulos:
                    texto = titulo.get_text(strip=True)
                    if len(texto) > 5:
                        contexto += " " + texto
            parent = parent.parent
        
        return contexto[:500]  # Limitar longitud
    
    def extraer_datos_tabla(self, tabla) -> List[Dict]:
        """Extraer datos estructurados de una tabla"""
        datos = []
        filas = tabla.find_all('tr')
        
        # Obtener cabeceras (primera fila o fila con th)
        cabeceras = []
        fila_cabecera = None
        
        for i, fila in enumerate(filas):
            celdas_th = fila.find_all('th')
            if celdas_th:
                fila_cabecera = i
                cabeceras = [th.get_text(strip=True) for th in celdas_th]
                break
        
        # Si no hay th, usar la primera fila como cabecera
        if not cabeceras and filas:
            primera_fila = filas[0].find_all(['td', 'th'])
            cabeceras = [celda.get_text(strip=True) for celda in primera_fila]
            fila_cabecera = 0
        
        # Procesar filas de datos
        filas_datos = filas[fila_cabecera + 1:] if fila_cabecera is not None else filas
        
        for fila in filas_datos:
            celdas = fila.find_all(['td', 'th'])
            if len(celdas) >= 2:  # Al menos cuenta y un valor
                fila_datos = {}
                
                for i, celda in enumerate(celdas):
                    valor_texto = celda.get_text(strip=True)
                    
                    if i == 0:  # Primera columna es generalmente la cuenta
                        fila_datos['cuenta'] = valor_texto
                    else:
                        # Usar cabecera si existe, sino usar √≠ndice
                        clave = cabeceras[i] if i < len(cabeceras) and cabeceras[i] else f"Columna_{i}"
                        fila_datos[clave] = {
                            'texto': valor_texto,
                            'numero': self.convertir_a_numero(valor_texto)
                        }
                
                if fila_datos.get('cuenta'):
                    datos.append(fila_datos)
        
        return datos
    
    def extraer_cabeceras_columnas(self, soup: BeautifulSoup) -> List[str]:
        """Extraer las cabeceras de las columnas de las tablas"""
        cabeceras_encontradas = set()
        
        tablas = soup.find_all('table')
        for tabla in tablas:
            # Buscar cabeceras en th
            headers_th = tabla.find_all('th')
            for header in headers_th:
                texto = header.get_text(strip=True)
                if texto and len(texto) > 1:
                    cabeceras_encontradas.add(texto)
            
            # Tambi√©n buscar en la primera fila si no hay th
            if not headers_th:
                primera_fila = tabla.find('tr')
                if primera_fila:
                    celdas = primera_fila.find_all('td')
                    for celda in celdas:
                        texto = celda.get_text(strip=True)
                        if texto and len(texto) > 1:
                            # Verificar si parece una cabecera (contiene a√±os o palabras clave)
                            if re.match(r'^\d{4}$', texto) or any(palabra in texto.lower() for palabra in ['cuenta', 'nota', 'descripci√≥n']):
                                cabeceras_encontradas.add(texto)
        
        return sorted(list(cabeceras_encontradas))
    
    def convertir_a_numero(self, texto: str) -> float:
        """Convertir texto a n√∫mero con manejo avanzado de formatos"""
        if not texto or texto.strip() == '':
            return 0.0
        
        texto_original = texto.strip()
        
        # Reemplazar espacios en blanco y guiones por 0
        if texto_original == '-' or texto_original == '--' or texto_original.isspace():
            return 0.0
        
        # Detectar n√∫meros negativos en par√©ntesis
        es_negativo = False
        if texto_original.startswith('(') and texto_original.endswith(')'):
            es_negativo = True
            texto_original = texto_original[1:-1].strip()
        
        # Detectar signo negativo
        if texto_original.startswith('-'):
            es_negativo = True
            texto_original = texto_original[1:].strip()
        
        try:
            # Remover s√≠mbolos de moneda comunes
            texto_limpio = re.sub(r'[S/\$‚Ç¨¬£¬•‚Çπ]', '', texto_original)
            
            # Remover espacios y otros caracteres no num√©ricos excepto punto, coma y gui√≥n
            texto_limpio = re.sub(r'[^\d.,\-]', '', texto_limpio)
            
            # FORMATO PERUANO/LATINOAMERICANO:
            # - Comas (,) = separadores de miles: 123,456 = 123456
            # - Puntos (.) = separadores decimales: 123.50 = 123.5
            
            # Caso 1: N√∫mero con comas y punto (ej: 1,234,567.89)
            if ',' in texto_limpio and '.' in texto_limpio:
                # Verificar que el punto est√© al final para decimales
                partes = texto_limpio.split('.')
                if len(partes) == 2 and len(partes[1]) <= 3:  # M√°ximo 3 decimales
                    parte_entera = partes[0].replace(',', '')  # Remover comas de miles
                    parte_decimal = partes[1]
                    texto_limpio = f"{parte_entera}.{parte_decimal}"
                else:
                    # Si hay m√∫ltiples puntos, tratar todo como entero
                    texto_limpio = texto_limpio.replace(',', '').replace('.', '')
            
            # Caso 2: Solo comas (ej: 123,456 = 123456)
            elif ',' in texto_limpio and '.' not in texto_limpio:
                texto_limpio = texto_limpio.replace(',', '')
            
            # Caso 3: Solo punto (ej: 123.45 = 123.45)
            elif '.' in texto_limpio and ',' not in texto_limpio:
                # Verificar si es decimal v√°lido
                partes = texto_limpio.split('.')
                if len(partes) == 2 and len(partes[1]) <= 3:
                    # Es decimal, mantener como est√°
                    pass
                else:
                    # M√∫ltiples puntos o formato inv√°lido, remover puntos
                    texto_limpio = texto_limpio.replace('.', '')
            
            # Caso 4: Solo n√∫meros (ya est√° limpio)
            
            # Convertir a float
            if texto_limpio:
                numero = float(texto_limpio)
                return -numero if es_negativo else numero
            else:
                return 0.0
                
        except (ValueError, TypeError):
            # Si falla la conversi√≥n, intentar extraer solo los d√≠gitos
            try:
                digitos = re.findall(r'\d', texto_original)
                if digitos:
                    numero = float(''.join(digitos))
                    return -numero if es_negativo else numero
                else:
                    return 0.0
            except:
                return 0.0
    
    def encontrar_a√±os(self, soup: BeautifulSoup) -> List[str]:
        """Encontrar los a√±os disponibles en el documento - MEJORADO para a√±os ‚â§2009"""
        a√±os_encontrados = set()
        
        # Buscar en el texto completo usando regex m√°s flexible
        texto = soup.get_text()
        
        # Buscar a√±os de 1990 a 2030 (rango amplio)
        import re
        a√±os_regex = re.findall(r'\b(19[9]\d|20[0-3]\d)\b', texto)
        for a√±o in a√±os_regex:
            a√±os_encontrados.add(a√±o)
        
        # Buscar espec√≠ficamente en headers de tablas con mayor precisi√≥n
        headers = soup.find_all(['th', 'td'])
        for header in headers:
            texto_header = header.get_text(strip=True)
            
            # Buscar a√±os espec√≠ficos en headers
            a√±os_en_header = re.findall(r'\b(19[9]\d|20[0-3]\d)\b', texto_header)
            for a√±o in a√±os_en_header:
                a√±os_encontrados.add(a√±o)
            
            # Tambi√©n buscar a√±os exactos de la lista predefinida
            for a√±o in self.palabras_clave["a√±os"]:
                if a√±o == texto_header:
                    a√±os_encontrados.add(a√±o)
        
        # Filtrar a√±os razonables (1990-2024) - excluir a√±os futuros
        import datetime
        a√±o_actual = datetime.datetime.now().year
        
        a√±os_filtrados = []
        for a√±o_str in a√±os_encontrados:
            try:
                a√±o_num = int(a√±o_str)
                if 1990 <= a√±o_num <= a√±o_actual:
                    a√±os_filtrados.append(a√±o_str)
            except:
                continue
        
        return sorted(list(set(a√±os_filtrados)), reverse=True)
    
    def generar_resumen_analisis(self, datos_extraidos: Dict[str, Any]) -> Dict[str, Any]:
        """Generar un resumen del an√°lisis realizado"""
        resumen = {
            'total_datos_extraidos': 0,
            'estados_encontrados': [],
            'a√±os_disponibles': datos_extraidos.get('a√±os_disponibles', []),
            'empresa': datos_extraidos.get('metadatos', {}).get('empresa', 'No identificada'),
            'a√±o_reporte': datos_extraidos.get('metadatos', {}).get('a√±o', 'No identificado'),
            'tipo_reporte': datos_extraidos.get('metadatos', {}).get('tipo', 'No identificado'),
            'cabeceras_disponibles': datos_extraidos.get('cabeceras_columnas', [])
        }
        
        # Contar datos por estado financiero
        estados_financieros = datos_extraidos.get('estados_financieros', {})
        for clave_estado, info_estado in estados_financieros.items():
            if info_estado.get('datos'):
                resumen['estados_encontrados'].append(info_estado['nombre'])
                resumen['total_datos_extraidos'] += len(info_estado['datos'])
        
        return resumen
    
    def consolidar_multiples_archivos_post_2010(self, resultados_analisis: List[Dict]) -> Dict[str, pd.DataFrame]:
        """
        Consolida m√∫ltiples archivos POST-2010 (‚â•2010) en una vista unificada por bloque
        
        Args:
            resultados_analisis: Lista de resultados de an√°lisis de m√∫ltiples archivos
        
        Returns:
            Dict con DataFrames consolidados por bloque: {
                'situacion_financiera': DataFrame,
                'resultados': DataFrame,
                'flujo_efectivo': DataFrame,
                'cambios_patrimonio': DataFrame
            }
        """
        # Filtrar solo archivos POST-2010 - CORREGIDO: buscar en 'datos' no en 'datos_extraidos'
        archivos_post_2010 = [r for r in resultados_analisis if r.get('datos', {}).get('a√±o_documento', 0) >= 2010]
        
        if not archivos_post_2010:
            return {}
        
        # Ordenar por a√±o descendente (m√°s reciente primero) - CORREGIDO
        archivos_post_2010.sort(key=lambda x: x.get('datos', {}).get('a√±o_documento', 0), reverse=True)
        
        # Mapeo de nombres de estados POST-2010
        estados_post_2010 = {
            'estado_situacion_financiera': 'Estado de Situaci√≥n Financiera',
            'estado_resultados': 'Estado de Resultados',
            'estado_flujo_efectivo': 'Estado de Flujo de Efectivo',
            'estado_cambios_patrimonio': 'Estado de Cambios en el Patrimonio Neto'
        }
        
        consolidado = {}
        a√±os_procesados = set()  # Para evitar duplicados
        
        for nombre_estado, titulo_estado in estados_post_2010.items():
            # Diccionario para consolidar: {nombre_cuenta: {a√±o1: valor1, a√±o2: valor2, ...}}
            cuentas_consolidadas = {}
            a√±os_disponibles = set()
            tiene_ccuenta = False  # ‚ú® NUEVO: Flag para patrimonio
            orden_cuentas = []  # ‚ú® NUEVO: Mantener orden de aparici√≥n
            
            # Procesar cada archivo
            for resultado in archivos_post_2010:
                datos_extraidos = resultado.get('datos', {})  # CORREGIDO: usar 'datos' no 'datos_extraidos'
                estados_financieros = datos_extraidos.get('estados_financieros', {})
                
                if nombre_estado in estados_financieros:
                    estado_datos = estados_financieros[nombre_estado]
                    
                    # ‚ú® NUEVO: Detectar si este estado tiene CCUENTA (Estado de Cambios en Patrimonio)
                    if estado_datos.get('columnas_especiales'):
                        tiene_ccuenta = True
                    
                    # Procesar cada cuenta del estado
                    for idx, item in enumerate(estado_datos.get('datos', [])):
                        # ‚ú® MEJORADO: Usar √≠ndice + nombre para evitar duplicados
                        nombre_cuenta = item.get('cuenta', 'Sin cuenta')
                        
                        # Para patrimonio, usar CCUENTA como identificador
                        if tiene_ccuenta and 'ccuenta' in item:
                            ccuenta = item.get('ccuenta', '')
                            clave_cuenta = f"{ccuenta}|{nombre_cuenta}"  # Usar CCUENTA|Cuenta como clave √∫nica
                        else:
                            # ‚ú® NUEVO: Usar √≠ndice + nombre para garantizar unicidad
                            clave_cuenta = f"{idx:04d}|{nombre_cuenta}"
                        
                        # Inicializar cuenta si no existe
                        if clave_cuenta not in cuentas_consolidadas:
                            if tiene_ccuenta:
                                cuentas_consolidadas[clave_cuenta] = {
                                    'ccuenta': item.get('ccuenta', ''),
                                    'cuenta': nombre_cuenta,
                                    'idx': idx  # ‚ú® NUEVO: Mantener orden
                                }
                            else:
                                cuentas_consolidadas[clave_cuenta] = {
                                    'cuenta': nombre_cuenta,
                                    'idx': idx  # ‚ú® NUEVO: Mantener orden
                                }
                            # Registrar orden de aparici√≥n solo la primera vez
                            if clave_cuenta not in orden_cuentas:
                                orden_cuentas.append(clave_cuenta)
                        
                        # Agregar valores por a√±o (solo si no se ha procesado ese a√±o antes)
                        for clave, valor in item.items():
                            if clave not in ['cuenta', 'ccuenta', 'es_total'] and isinstance(valor, dict):
                                # Extraer a√±o y valor num√©rico
                                a√±o_str = str(clave)
                                if a√±o_str.isdigit():
                                    a√±o = int(a√±o_str)
                                    
                                    # Solo agregar si ese a√±o no ha sido procesado para esta cuenta
                                    if a√±o not in cuentas_consolidadas[clave_cuenta]:
                                        numero = valor.get('numero', 0)
                                        cuentas_consolidadas[clave_cuenta][a√±o] = numero
                                        a√±os_disponibles.add(a√±o)
            
            # Convertir a DataFrame
            if cuentas_consolidadas:
                # ‚ú® MEJORADO: Crear lista de filas en el orden correcto
                filas_consolidadas = []
                
                # Iterar en el orden de aparici√≥n original
                for clave_cuenta in orden_cuentas:
                    if clave_cuenta in cuentas_consolidadas:
                        datos_cuenta = cuentas_consolidadas[clave_cuenta]
                        fila = {}
                        
                        # ‚ú® NUEVO: Para patrimonio, incluir CCUENTA
                        if tiene_ccuenta:
                            fila['CCUENTA'] = datos_cuenta.get('ccuenta', '')
                            fila['Cuenta'] = datos_cuenta.get('cuenta', '')
                        else:
                            fila['Cuenta'] = datos_cuenta.get('cuenta', '')
                        
                        # Agregar valores por a√±o
                        for a√±o in sorted(a√±os_disponibles, reverse=True):
                            if a√±o in datos_cuenta:
                                fila[a√±o] = datos_cuenta[a√±o]
                        
                        filas_consolidadas.append(fila)
                
                df = pd.DataFrame(filas_consolidadas)
                
                # ‚ú® NUEVO: Ordenar columnas seg√∫n el tipo de estado
                if tiene_ccuenta:
                    # Para patrimonio: CCUENTA, Cuenta, luego a√±os descendentes
                    columnas = ['CCUENTA', 'Cuenta']
                    a√±os_cols = sorted([col for col in df.columns if col not in ['CCUENTA', 'Cuenta']], reverse=True)
                    columnas.extend(a√±os_cols)
                else:
                    # Para otros estados: Cuenta, luego a√±os descendentes
                    columnas = ['Cuenta']
                    a√±os_cols = sorted([col for col in df.columns if col != 'Cuenta'], reverse=True)
                    columnas.extend(a√±os_cols)
                
                # Reordenar y llenar valores faltantes con 0
                df = df[columnas].fillna(0)
                
                consolidado[nombre_estado] = df
        
        return consolidado

def main():
    st.title("üìä Analizador Financiero con Streamlit")
    st.markdown("### An√°lisis autom√°tico de estados financieros desde archivos XLS")
    
    # Crear instancia del analizador
    analizador = AnalizadorFinanciero()
    
    # Sidebar para configuraci√≥n
    st.sidebar.header("‚öôÔ∏è Configuraci√≥n")
    st.sidebar.markdown("Sube uno o varios archivos XLS para analizar")
    
    # Upload de archivos
    archivos_subidos = st.file_uploader(
        "Selecciona archivos XLS de estados financieros",
        type=['xls', 'xlsx'],
        accept_multiple_files=True,
        help="Puedes subir m√∫ltiples archivos XLS con estados financieros"
    )
    
    if archivos_subidos:
        st.success(f"‚úÖ {len(archivos_subidos)} archivo(s) cargado(s)")
        
        # Procesar cada archivo
        resultados_analisis = []
        
        for archivo in archivos_subidos:
            with st.expander(f"üìÑ Analizando: {archivo.name}"):
                try:
                    # Guardar archivo en directorio temporal
                    ruta_temp = os.path.join(analizador.temp_dir, archivo.name)
                    with open(ruta_temp, 'wb') as f:
                        f.write(archivo.getbuffer())
                    
                    st.info("‚è≥ Convirtiendo XLS a HTML...")
                    
                    # Convertir a HTML
                    archivo_html = analizador.convertir_xls_a_html(ruta_temp)
                    
                    if archivo_html:
                        st.success("‚úÖ Conversi√≥n a HTML completada")
                        
                        st.info("‚è≥ Extrayendo datos financieros...")
                        
                        # Extraer datos (retorna tupla: datos_legacy, resultados_extractor)
                        datos_extraidos, resultados_extractor = analizador.extraer_datos_html(archivo_html)
                        
                        if datos_extraidos:
                            st.success("‚úÖ Extracci√≥n de datos completada")
                            
                            # Generar resumen
                            resumen = analizador.generar_resumen_analisis(datos_extraidos)
                            
                            # Realizar an√°lisis horizontal si es POST-2010
                            analisis_horizontal = None
                            if datos_extraidos.get('a√±o_documento', 0) >= 2010:
                                try:
                                    analisis_horizontal = analizador.analizador_horizontal.analizar_desde_extractor(resultados_extractor)
                                except Exception as e:
                                    st.warning(f"‚ö†Ô∏è No se pudo realizar an√°lisis horizontal: {str(e)}")
                            
                            resultados_analisis.append({
                                'archivo': archivo.name,
                                'datos': datos_extraidos,
                                'datos_extractor': resultados_extractor,  # ‚ú® Formato extractor para an√°lisis horizontal/vertical
                                'analisis_horizontal': analisis_horizontal,  # ‚ú® An√°lisis horizontal ya calculado
                                'resumen': resumen
                            })
                            
                            # Mostrar informaci√≥n b√°sica
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("Empresa", resumen['empresa'])
                            
                            with col2:
                                st.metric("A√±o", resumen['a√±o_reporte'])
                            
                            with col3:
                                st.metric("Datos extra√≠dos", resumen['total_datos_extraidos'])
                            
                            # Mostrar estados encontrados
                            if resumen['estados_encontrados']:
                                st.write("**Estados financieros detectados:**")
                                for estado in resumen['estados_encontrados']:
                                    st.write(f"- {estado}")
                            
                            # Mostrar a√±os disponibles
                            if resumen['a√±os_disponibles']:
                                st.write("**A√±os disponibles:**")
                                st.write(", ".join(str(a√±o) for a√±o in resumen['a√±os_disponibles']))
                            
                            # Mostrar cabeceras disponibles
                            if resumen['cabeceras_disponibles']:
                                st.write("**Cabeceras de columnas detectadas:**")
                                st.write(", ".join(resumen['cabeceras_disponibles'][:10]))  # Mostrar solo las primeras 10
                        
                        else:
                            st.error("‚ùå Error al extraer datos del archivo")
                    
                    else:
                        st.error("‚ùå Error al convertir archivo a HTML")
                
                except Exception as e:
                    st.error(f"‚ùå Error al procesar {archivo.name}: {str(e)}")
        
        # Mostrar an√°lisis consolidado
        if resultados_analisis:
            st.header("üìà An√°lisis Consolidado")
            
            # Crear tabs para diferentes vistas
            tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs([
                "Resumen General", 
                "Estados Financieros", 
                "An√°lisis Vertical", 
                "An√°lisis Horizontal",
                "An√°lisis Vertical Consolidado",
                "An√°lisis Horizontal Consolidado",
                "Vista Consolidada - Ratios", 
                "Datos Detallados"
            ])
            
            with tab1:
                st.subheader("Resumen de todos los archivos procesados")
                
                # Tabla resumen
                datos_resumen = []
                for resultado in resultados_analisis:
                    datos_resumen.append({
                        'Archivo': resultado['archivo'],
                        'Empresa': resultado['resumen']['empresa'],
                        'A√±o': resultado['resumen']['a√±o_reporte'],
                        'Tipo': resultado['resumen']['tipo_reporte'],
                        'Datos Extra√≠dos': resultado['resumen']['total_datos_extraidos'],
                        'Estados Detectados': len(resultado['resumen']['estados_encontrados'])
                    })
                
                df_resumen = pd.DataFrame(datos_resumen)
                st.dataframe(df_resumen, use_container_width=True)
            
            with tab7:
                st.subheader("üìä Vista Consolidada Multi-Per√≠odo - Ratios Financieros")
                st.caption("*Consolida autom√°ticamente m√∫ltiples archivos de a√±os consecutivos en una sola vista por bloque*")
                
                # Verificar si hay archivos POST-2010 - CORREGIDO: usar 'datos' no 'datos_extraidos'
                archivos_post_2010 = [r for r in resultados_analisis 
                                      if r.get('datos', {}).get('a√±o_documento', 0) >= 2010]
                
                if not archivos_post_2010:
                    st.warning("‚ö†Ô∏è No hay archivos del formato POST-2010 (‚â•2010) para consolidar.")
                    st.info("Esta vista solo funciona con archivos del a√±o 2010 en adelante.")
                else:
                    # Detectar empresa (asumiendo que todos son de la misma empresa)
                    empresa = archivos_post_2010[0].get('resumen', {}).get('empresa', 'No identificada')
                    a√±os_detectados = sorted([r.get('datos', {}).get('a√±o_documento', 0) 
                                             for r in archivos_post_2010], reverse=True)
                    
                    st.success(f"‚úÖ **Empresa:** {empresa}")
                    st.info(f"üìÖ **A√±os detectados:** {', '.join(map(str, a√±os_detectados))}")
                    
                    # Consolidar datos
                    with st.spinner("Consolidando datos de m√∫ltiples archivos..."):
                        consolidado = analizador.consolidar_multiples_archivos_post_2010(resultados_analisis)
                    
                    if consolidado:
                        # Crear sub-tabs por cada bloque
                        bloques = []
                        titulos_bloques = []
                        
                        if 'estado_situacion_financiera' in consolidado:
                            bloques.append('estado_situacion_financiera')
                            titulos_bloques.append("üìà Situaci√≥n Financiera")
                        
                        if 'estado_resultados' in consolidado:
                            bloques.append('estado_resultados')
                            titulos_bloques.append("üí∞ Resultados")
                        
                        if 'estado_flujo_efectivo' in consolidado:
                            bloques.append('estado_flujo_efectivo')
                            titulos_bloques.append("üíµ Flujo de Efectivo")
                        
                        if 'estado_cambios_patrimonio' in consolidado:
                            bloques.append('estado_cambios_patrimonio')
                            titulos_bloques.append("üè¶ Cambios en Patrimonio")
                        
                        if bloques:
                            tabs_consolidado = st.tabs(titulos_bloques)
                            
                            for idx, bloque in enumerate(bloques):
                                with tabs_consolidado[idx]:
                                    df_bloque = consolidado[bloque]
                                    
                                    # Formatear n√∫meros
                                    df_display = df_bloque.copy()
                                    for col in df_display.columns:
                                        if col != 'Cuenta':
                                            df_display[col] = df_display[col].apply(
                                                lambda x: f"{x:,.0f}" if isinstance(x, (int, float)) and x != 0 else '-'
                                            )
                                    
                                    st.dataframe(df_display, use_container_width=True, height=600)
                                    
                                    # M√©tricas
                                    col1, col2 = st.columns(2)
                                    with col1:
                                        st.metric("Total de Cuentas", len(df_bloque))
                                    with col2:
                                        a√±os_cols = [col for col in df_bloque.columns if col != 'Cuenta']
                                        st.metric("A√±os Consolidados", len(a√±os_cols))
                                    
                                    # Bot√≥n de descarga
                                    csv = df_display.to_csv(index=False).encode('utf-8')
                                    st.download_button(
                                        label=f"‚¨áÔ∏è Descargar {titulos_bloques[idx]} (CSV)",
                                        data=csv,
                                        file_name=f"{empresa}_{bloque}_consolidado.csv",
                                        mime="text/csv",
                                        key=f"download_{bloque}"
                                    )
                    else:
                        st.warning("No se pudo consolidar la informaci√≥n. Verifica que los archivos sean del formato POST-2010.")
                    
                    # ===== SECCI√ìN DE RATIOS FINANCIEROS =====
                    st.markdown("---")
                    st.subheader("üìä Ratios Financieros")
                    st.caption("Indicadores calculados desde el Estado de Situaci√≥n Financiera")
                    
                    try:
                        # Extraer solo los datos_extractor de los archivos POST-2010
                        extractores_post_2010 = [
                            r.get('datos_extractor') 
                            for r in archivos_post_2010 
                            if r.get('datos_extractor') is not None
                        ]
                        
                        if len(extractores_post_2010) > 0:
                            with st.spinner("Calculando ratios financieros..."):
                                resultados_ratios = analizador.calculador_ratios.calcular_ratios_desde_extractor(extractores_post_2010)
                            
                            if 'error' not in resultados_ratios and resultados_ratios.get('ratios_por_a√±o'):
                                st.success(f"‚úÖ Ratios calculados para {len(resultados_ratios['a√±os'])} a√±os")
                                
                                # Crear DataFrame con los ratios
                                a√±os_ratios = sorted(resultados_ratios['a√±os'])
                                ratios_data = []
                                
                                for a√±o in a√±os_ratios:
                                    ratios_a√±o = resultados_ratios['ratios_por_a√±o'][a√±o]
                                    ratios_data.append({
                                        'A√±o': a√±o,
                                        'Liquidez Corriente': ratios_a√±o.get('liquidez_corriente'),
                                        'Prueba √Åcida': ratios_a√±o.get('prueba_acida'),
                                        'Raz√≥n Deuda Total': ratios_a√±o.get('razon_deuda_total'),
                                        'Raz√≥n Deuda/Patrimonio': ratios_a√±o.get('razon_deuda_patrimonio'),
                                        'Margen Neto': ratios_a√±o.get('margen_neto'),
                                        'ROA': ratios_a√±o.get('roa'),
                                        'ROE': ratios_a√±o.get('roe'),
                                        'Rotaci√≥n Activos Totales': ratios_a√±o.get('rotacion_activos_totales'),
                                        'Rotaci√≥n CxC': ratios_a√±o.get('rotacion_cuentas_cobrar'),
                                        'Rotaci√≥n Inventarios': ratios_a√±o.get('rotacion_inventarios')
                                    })
                                
                                df_ratios = pd.DataFrame(ratios_data)
                                
                                # Mostrar tabla de ratios
                                st.markdown("##### üìã Tabla de Ratios")
                                df_ratios_display = df_ratios.copy()
                                df_ratios_display['Liquidez Corriente'] = df_ratios_display['Liquidez Corriente'].apply(
                                    lambda x: f"{x:.2f}" if pd.notnull(x) else "N/A"
                                )
                                df_ratios_display['Prueba √Åcida'] = df_ratios_display['Prueba √Åcida'].apply(
                                    lambda x: f"{x:.2f}" if pd.notnull(x) else "N/A"
                                )
                                df_ratios_display['Raz√≥n Deuda Total'] = df_ratios_display['Raz√≥n Deuda Total'].apply(
                                    lambda x: f"{x:.1%}" if pd.notnull(x) else "N/A"
                                )
                                df_ratios_display['Raz√≥n Deuda/Patrimonio'] = df_ratios_display['Raz√≥n Deuda/Patrimonio'].apply(
                                    lambda x: f"{x:.2f}" if pd.notnull(x) else "N/A"
                                )
                                df_ratios_display['Margen Neto'] = df_ratios_display['Margen Neto'].apply(
                                    lambda x: f"{x:.3%}" if pd.notnull(x) else "N/A"
                                )
                                df_ratios_display['ROA'] = df_ratios_display['ROA'].apply(
                                    lambda x: f"{x:.3%}" if pd.notnull(x) else "N/A"
                                )
                                df_ratios_display['ROE'] = df_ratios_display['ROE'].apply(
                                    lambda x: f"{x:.3%}" if pd.notnull(x) else "N/A"
                                )
                                df_ratios_display['Rotaci√≥n Activos Totales'] = df_ratios_display['Rotaci√≥n Activos Totales'].apply(
                                    lambda x: f"{x:.3f}" if pd.notnull(x) else "N/A"
                                )
                                df_ratios_display['Rotaci√≥n CxC'] = df_ratios_display['Rotaci√≥n CxC'].apply(
                                    lambda x: f"{x:.3f}" if pd.notnull(x) else "N/A"
                                )
                                df_ratios_display['Rotaci√≥n Inventarios'] = df_ratios_display['Rotaci√≥n Inventarios'].apply(
                                    lambda x: f"{x:.3f}" if pd.notnull(x) else "N/A"
                                )
                                
                                st.dataframe(df_ratios_display, use_container_width=True)
                                
                                # Mostrar resumen estad√≠stico
                                if resultados_ratios.get('resumen'):
                                    st.markdown("##### üìä Resumen Estad√≠stico")
                                    col1, col2, col3, col4 = st.columns(4)
                                    
                                    with col1:
                                        st.markdown("**Ratios de Liquidez**")
                                        lc_stats = resultados_ratios['resumen'].get('liquidez_corriente', {})
                                        if lc_stats.get('promedio'):
                                            st.metric("Liquidez Corriente (Promedio)", f"{lc_stats['promedio']:.2f}")
                                            st.caption(f"Min: {lc_stats['min']:.2f} | Max: {lc_stats['max']:.2f}")
                                        
                                        pa_stats = resultados_ratios['resumen'].get('prueba_acida', {})
                                        if pa_stats.get('promedio'):
                                            st.metric("Prueba √Åcida (Promedio)", f"{pa_stats['promedio']:.2f}")
                                            st.caption(f"Min: {pa_stats['min']:.2f} | Max: {pa_stats['max']:.2f}")
                                    
                                    with col2:
                                        st.markdown("**Ratios de Endeudamiento**")
                                        rdt_stats = resultados_ratios['resumen'].get('razon_deuda_total', {})
                                        if rdt_stats.get('promedio'):
                                            st.metric("Raz√≥n Deuda Total (Promedio)", f"{rdt_stats['promedio']:.1%}")
                                            st.caption(f"Min: {rdt_stats['min']:.1%} | Max: {rdt_stats['max']:.1%}")
                                        
                                        rdp_stats = resultados_ratios['resumen'].get('razon_deuda_patrimonio', {})
                                        if rdp_stats.get('promedio'):
                                            st.metric("Raz√≥n Deuda/Patrimonio (Promedio)", f"{rdp_stats['promedio']:.2f}")
                                            st.caption(f"Min: {rdp_stats['min']:.2f} | Max: {rdp_stats['max']:.2f}")
                                    
                                    with col3:
                                        st.markdown("**Ratios de Rentabilidad**")
                                        mn_stats = resultados_ratios['resumen'].get('margen_neto', {})
                                        if mn_stats.get('promedio'):
                                            st.metric("Margen Neto (Promedio)", f"{mn_stats['promedio']:.3%}")
                                            st.caption(f"Min: {mn_stats['min']:.3%} | Max: {mn_stats['max']:.3%}")
                                        
                                        roa_stats = resultados_ratios['resumen'].get('roa', {})
                                        if roa_stats.get('promedio'):
                                            st.metric("ROA (Promedio)", f"{roa_stats['promedio']:.3%}")
                                            st.caption(f"Min: {roa_stats['min']:.3%} | Max: {roa_stats['max']:.3%}")
                                        
                                        roe_stats = resultados_ratios['resumen'].get('roe', {})
                                        if roe_stats.get('promedio'):
                                            st.metric("ROE (Promedio)", f"{roe_stats['promedio']:.3%}")
                                            st.caption(f"Min: {roe_stats['min']:.3%} | Max: {roe_stats['max']:.3%}")
                                    
                                    with col4:
                                        st.markdown("**Ratios de Actividad**")
                                        rat_stats = resultados_ratios['resumen'].get('rotacion_activos_totales', {})
                                        if rat_stats.get('promedio'):
                                            st.metric("Rotaci√≥n Activos (Promedio)", f"{rat_stats['promedio']:.3f}")
                                            st.caption(f"Min: {rat_stats['min']:.3f} | Max: {rat_stats['max']:.3f}")
                                        
                                        rcxc_stats = resultados_ratios['resumen'].get('rotacion_cuentas_cobrar', {})
                                        if rcxc_stats.get('promedio'):
                                            st.metric("Rotaci√≥n CxC (Promedio)", f"{rcxc_stats['promedio']:.3f}")
                                            st.caption(f"Min: {rcxc_stats['min']:.3f} | Max: {rcxc_stats['max']:.3f}")
                                        
                                        ri_stats = resultados_ratios['resumen'].get('rotacion_inventarios', {})
                                        if ri_stats.get('promedio'):
                                            st.metric("Rotaci√≥n Inventarios (Promedio)", f"{ri_stats['promedio']:.3f}")
                                            st.caption(f"Min: {ri_stats['min']:.3f} | Max: {ri_stats['max']:.3f}")
                                
                                # Generar y mostrar gr√°ficos
                                st.markdown("---")
                                st.markdown("##### üìà Gr√°ficos de Tendencias")
                                
                                graficos_ratios = analizador.calculador_ratios.generar_graficos_ratios(resultados_ratios)
                                
                                if graficos_ratios:
                                    for i, fig in enumerate(graficos_ratios, 1):
                                        st.plotly_chart(fig, use_container_width=True)
                                
                                # ===== AN√ÅLISIS CON IA =====
                                st.markdown("---")
                                st.markdown("##### ü§ñ An√°lisis Inteligente con IA")
                                st.caption("An√°lisis generado por IA en 3 fases especializadas (OpenAI GPT-4o-mini via Groq)")
                                
                                if st.button("üîç Generar An√°lisis con IA (3 Fases)", key="btn_analisis_ia"):
                                    # Contenedor para el progreso
                                    progress_text = st.empty()
                                    progress_bar = st.progress(0)
                                    
                                    progress_text.text("‚è≥ Fase 1/3: Analizando Liquidez y Endeudamiento...")
                                    progress_bar.progress(0)
                                    
                                    # Generar an√°lisis (internamente hace 3 solicitudes)
                                    analisis_ia = analizar_ratios_con_ia(resultados_ratios, empresa)
                                    
                                    progress_bar.progress(100)
                                    progress_text.text("‚úÖ An√°lisis completado!")
                                    
                                    # Limpiar indicadores de progreso despu√©s de 1 segundo
                                    import time
                                    time.sleep(1)
                                    progress_text.empty()
                                    progress_bar.empty()
                                    
                                    # Mostrar el an√°lisis en un expander
                                    with st.expander("üìÑ Ver An√°lisis Completo de IA (3 Fases)", expanded=True):
                                        st.markdown(analisis_ia)
                                    
                                    # Opci√≥n para descargar el an√°lisis
                                    st.download_button(
                                        label="üì• Descargar An√°lisis de IA (TXT)",
                                        data=analisis_ia,
                                        file_name=f"analisis_ia_ratios_{empresa.replace(' ', '_')}.txt",
                                        mime="text/plain",
                                        key="download_analisis_ia"
                                    )
                                
                                # Bot√≥n de exportaci√≥n
                                st.markdown("---")
                                if st.button("üì• Exportar Ratios a Excel", key="export_ratios"):
                                    archivo_salida = f"ratios_financieros_{empresa.replace(' ', '_')}.xlsx"
                                    analizador.calculador_ratios.exportar_ratios_excel(resultados_ratios, archivo_salida)
                                    st.success(f"‚úÖ Ratios exportados a: {archivo_salida}")
                            
                            else:
                                st.warning("‚ö†Ô∏è No se pudieron calcular los ratios financieros")
                                if 'error' in resultados_ratios:
                                    st.error(resultados_ratios['error'])
                        else:
                            st.warning("‚ö†Ô∏è No hay datos disponibles para calcular ratios financieros")
                            st.info("Los ratios requieren archivos con datos del extractor mejorado")
                    
                    except Exception as e:
                        st.error(f"‚ùå Error al calcular ratios financieros: {str(e)}")
                        import traceback
                        st.code(traceback.format_exc())
            
            with tab2:
                st.subheader("üìã Estados Financieros")
                st.info("üìä Vista detallada de estados financieros (solo formato POST-2010 ‚â•2010)")
                
                try:
                    # Filtrar solo archivos POST-2010
                    archivos_post_2010 = [
                        r for r in resultados_analisis 
                        if r.get('datos', {}).get('a√±o_documento', 0) >= 2010
                    ]
                    
                    if not archivos_post_2010:
                        st.warning("‚ö†Ô∏è No hay archivos del formato POST-2010 (‚â•2010) para mostrar estados financieros")
                        st.info("Los estados financieros solo se muestran para archivos de a√±os 2010 en adelante")
                    else:
                        st.success(f"‚úÖ {len(archivos_post_2010)} archivo(s) POST-2010 encontrado(s)")
                        
                        # Crear opciones del selector con formato "Empresa - A√±o"
                        opciones_selector = {}
                        for r in archivos_post_2010:
                            a√±o_doc = r.get('datos', {}).get('a√±o_documento', 'N/A')
                            empresa = r.get('datos', {}).get('metadatos', {}).get('empresa', 'No identificada')
                            etiqueta = f"{empresa} - {a√±o_doc}"
                            opciones_selector[etiqueta] = r['archivo']
                        
                        # Selector de archivo con etiquetas de empresa-a√±o
                        archivo_seleccionado_label = st.selectbox(
                            "Selecciona una empresa y a√±o para ver estados financieros:",
                            list(opciones_selector.keys()),
                            key="selector_estados_financieros"
                        )
                        
                        # Obtener el archivo correspondiente
                        archivo_seleccionado = opciones_selector[archivo_seleccionado_label]
                        
                        # Obtener resultado seleccionado
                        resultado_sel = next(r for r in archivos_post_2010 if r['archivo'] == archivo_seleccionado)
                        
                        a√±o_doc = resultado_sel['datos'].get('a√±o_documento', 2020)
                        estados_financieros = resultado_sel['datos'].get('estados_financieros', {})
                        
                        if not estados_financieros:
                            st.warning("‚ö†Ô∏è No se detectaron estados financieros en este archivo")
                        else:
                            # Crear sub-tabs para cada estado financiero
                            tab_situacion, tab_resultados, tab_patrimonio, tab_flujo = st.tabs([
                                "üìä Estado de Situaci√≥n Financiera",
                                "üí∞ Estado de Resultados",
                                "üèõÔ∏è Estado de Cambios en el Patrimonio",
                                "üíµ Estado de Flujo de Efectivo"
                            ])
                            
                            # Tab: Estado de Situaci√≥n Financiera
                            with tab_situacion:
                                estado_key = 'estado_situacion_financiera'
                                if estado_key in estados_financieros and estados_financieros[estado_key].get('datos'):
                                    info_estado = estados_financieros[estado_key]
                                    st.write(f"### {info_estado['nombre']}")
                                    
                                    # Convertir datos a DataFrame
                                    datos_estado = []
                                    for item in info_estado['datos']:
                                        fila = {'Cuenta': item.get('cuenta', 'Sin cuenta')}
                                        
                                        # Agregar solo las columnas num√©ricas (a√±os)
                                        for clave, valor in item.items():
                                            if clave != 'cuenta':
                                                if isinstance(valor, dict):
                                                    numero_convertido = valor.get('numero', 0)
                                                    fila[clave] = numero_convertido
                                                else:
                                                    if clave.isdigit() or any(char.isdigit() for char in str(clave)):
                                                        fila[clave] = valor if valor else 0
                                        
                                        datos_estado.append(fila)
                                    
                                    if datos_estado:
                                        df_estado = pd.DataFrame(datos_estado)
                                        
                                        # Ordenar columnas: primero 'Cuenta', luego a√±os en orden descendente
                                        columnas = ['Cuenta']
                                        a√±os_cols = [col for col in df_estado.columns if col != 'Cuenta']
                                        a√±os_cols_sorted = sorted(a√±os_cols, reverse=True)
                                        columnas.extend(a√±os_cols_sorted)
                                        
                                        df_estado = df_estado[columnas]
                                        
                                        # Formatear n√∫meros para mejor visualizaci√≥n
                                        for col in df_estado.columns:
                                            if col != 'Cuenta':
                                                try:
                                                    df_estado[col] = df_estado[col].apply(
                                                        lambda x: f"{x:,.0f}" if isinstance(x, (int, float)) and x != 0 else '-'
                                                    )
                                                except:
                                                    pass
                                        
                                        st.dataframe(df_estado, use_container_width=True)
                                        st.write(f"**Total de cuentas:** {len(datos_estado)}")
                                    else:
                                        st.info("No se encontraron datos para este estado financiero")
                                else:
                                    st.info("üì≠ No hay datos disponibles para Estado de Situaci√≥n Financiera")
                            
                            # Tab: Estado de Resultados
                            with tab_resultados:
                                estado_key = 'estado_resultados'
                                if estado_key in estados_financieros and estados_financieros[estado_key].get('datos'):
                                    info_estado = estados_financieros[estado_key]
                                    st.write(f"### {info_estado['nombre']}")
                                    
                                    # Convertir datos a DataFrame
                                    datos_estado = []
                                    for item in info_estado['datos']:
                                        fila = {'Cuenta': item.get('cuenta', 'Sin cuenta')}
                                        
                                        for clave, valor in item.items():
                                            if clave != 'cuenta':
                                                if isinstance(valor, dict):
                                                    numero_convertido = valor.get('numero', 0)
                                                    fila[clave] = numero_convertido
                                                else:
                                                    if clave.isdigit() or any(char.isdigit() for char in str(clave)):
                                                        fila[clave] = valor if valor else 0
                                        
                                        datos_estado.append(fila)
                                    
                                    if datos_estado:
                                        df_estado = pd.DataFrame(datos_estado)
                                        
                                        columnas = ['Cuenta']
                                        a√±os_cols = [col for col in df_estado.columns if col != 'Cuenta']
                                        a√±os_cols_sorted = sorted(a√±os_cols, reverse=True)
                                        columnas.extend(a√±os_cols_sorted)
                                        
                                        df_estado = df_estado[columnas]
                                        
                                        for col in df_estado.columns:
                                            if col != 'Cuenta':
                                                try:
                                                    df_estado[col] = df_estado[col].apply(
                                                        lambda x: f"{x:,.0f}" if isinstance(x, (int, float)) and x != 0 else '-'
                                                    )
                                                except:
                                                    pass
                                        
                                        st.dataframe(df_estado, use_container_width=True)
                                        st.write(f"**Total de cuentas:** {len(datos_estado)}")
                                    else:
                                        st.info("No se encontraron datos para este estado financiero")
                                else:
                                    st.info("üì≠ No hay datos disponibles para Estado de Resultados")
                            
                            # Tab: Estado de Cambios en el Patrimonio
                            with tab_patrimonio:
                                estado_key = 'estado_cambios_patrimonio'
                                if estado_key in estados_financieros and estados_financieros[estado_key].get('datos'):
                                    info_estado = estados_financieros[estado_key]
                                    st.write(f"### {info_estado['nombre']}")
                                    
                                    # Convertir datos a DataFrame
                                    datos_estado = []
                                    for item in info_estado['datos']:
                                        fila = {'Cuenta': item.get('cuenta', 'Sin cuenta')}
                                        
                                        for clave, valor in item.items():
                                            if clave != 'cuenta':
                                                if isinstance(valor, dict):
                                                    numero_convertido = valor.get('numero', 0)
                                                    fila[clave] = numero_convertido
                                                else:
                                                    if clave.isdigit() or any(char.isdigit() for char in str(clave)):
                                                        fila[clave] = valor if valor else 0
                                        
                                        datos_estado.append(fila)
                                    
                                    if datos_estado:
                                        df_estado = pd.DataFrame(datos_estado)
                                        
                                        columnas = ['Cuenta']
                                        a√±os_cols = [col for col in df_estado.columns if col != 'Cuenta']
                                        a√±os_cols_sorted = sorted(a√±os_cols, reverse=True)
                                        columnas.extend(a√±os_cols_sorted)
                                        
                                        df_estado = df_estado[columnas]
                                        
                                        for col in df_estado.columns:
                                            if col != 'Cuenta':
                                                try:
                                                    df_estado[col] = df_estado[col].apply(
                                                        lambda x: f"{x:,.0f}" if isinstance(x, (int, float)) and x != 0 else '-'
                                                    )
                                                except:
                                                    pass
                                        
                                        st.dataframe(df_estado, use_container_width=True)
                                        st.write(f"**Total de cuentas:** {len(datos_estado)}")
                                    else:
                                        st.info("No se encontraron datos para este estado financiero")
                                else:
                                    st.info("üì≠ No hay datos disponibles para Estado de Cambios en el Patrimonio")
                            
                            # Tab: Estado de Flujo de Efectivo
                            with tab_flujo:
                                estado_key = 'estado_flujo_efectivo'
                                if estado_key in estados_financieros and estados_financieros[estado_key].get('datos'):
                                    info_estado = estados_financieros[estado_key]
                                    st.write(f"### {info_estado['nombre']}")
                                    
                                    # Convertir datos a DataFrame
                                    datos_estado = []
                                    for item in info_estado['datos']:
                                        fila = {'Cuenta': item.get('cuenta', 'Sin cuenta')}
                                        
                                        for clave, valor in item.items():
                                            if clave != 'cuenta':
                                                if isinstance(valor, dict):
                                                    numero_convertido = valor.get('numero', 0)
                                                    fila[clave] = numero_convertido
                                                else:
                                                    if clave.isdigit() or any(char.isdigit() for char in str(clave)):
                                                        fila[clave] = valor if valor else 0
                                        
                                        datos_estado.append(fila)
                                    
                                    if datos_estado:
                                        df_estado = pd.DataFrame(datos_estado)
                                        
                                        columnas = ['Cuenta']
                                        a√±os_cols = [col for col in df_estado.columns if col != 'Cuenta']
                                        a√±os_cols_sorted = sorted(a√±os_cols, reverse=True)
                                        columnas.extend(a√±os_cols_sorted)
                                        
                                        df_estado = df_estado[columnas]
                                        
                                        for col in df_estado.columns:
                                            if col != 'Cuenta':
                                                try:
                                                    df_estado[col] = df_estado[col].apply(
                                                        lambda x: f"{x:,.0f}" if isinstance(x, (int, float)) and x != 0 else '-'
                                                    )
                                                except:
                                                    pass
                                        
                                        st.dataframe(df_estado, use_container_width=True)
                                        st.write(f"**Total de cuentas:** {len(datos_estado)}")
                                    else:
                                        st.info("No se encontraron datos para este estado financiero")
                                else:
                                    st.info("üì≠ No hay datos disponibles para Estado de Flujo de Efectivo")
                
                except Exception as e:
                    st.error(f"‚ùå Error al mostrar estados financieros: {str(e)}")
                    import traceback
                    st.code(traceback.format_exc())
            
            with tab3:
                st.subheader("üìä An√°lisis Vertical Mejorado")
                
                try:
                    # Crear opciones del selector con "Empresa - A√±o"
                    opciones_selector = {}
                    for resultado in resultados_analisis:
                        a√±o_doc = resultado.get('datos', {}).get('a√±o_documento', 'N/A')
                        empresa = resultado.get('datos', {}).get('metadatos', {}).get('empresa', 'No identificada')
                        etiqueta = f"{empresa} - {a√±o_doc}"
                        opciones_selector[etiqueta] = resultado['archivo']
                    
                    if not opciones_selector:
                        st.warning("‚ö†Ô∏è No hay archivos disponibles para an√°lisis vertical")
                    else:
                        st.success(f"‚úÖ {len(opciones_selector)} archivo(s) disponible(s)")
                        
                        # Selector de archivo
                        archivo_seleccionado_label = st.selectbox(
                            "Selecciona una empresa y a√±o para an√°lisis vertical:",
                            list(opciones_selector.keys()),
                            key="selector_vertical"
                        )
                        
                        # Obtener el archivo correspondiente
                        archivo_seleccionado = opciones_selector[archivo_seleccionado_label]
                        resultado = next(r for r in resultados_analisis if r['archivo'] == archivo_seleccionado)
                        
                        st.write(f"### üìÑ {archivo_seleccionado_label}")
                        
                        # Leer el archivo HTML original para an√°lisis
                        ruta_html = os.path.join(analizador.temp_dir, resultado['archivo'].replace('.xls', '.html').replace('.xlsx', '.html'))
                        
                        if os.path.exists(ruta_html):
                            with open(ruta_html, 'r', encoding='utf-8', errors='ignore') as f:
                                html_content = f.read()
                            
                            # Extraer estados con el extractor mejorado
                            with st.spinner("Extrayendo estados financieros..."):
                                resultados_extractor = analizador.extractor_mejorado.extraer_todos_estados(html_content)
                            
                            # Mostrar metadatos
                            metadatos = resultados_extractor.get('metadatos', {})
                            col1, col2, col3, col4 = st.columns(4)
                            
                            with col1:
                                st.metric("üè¢ Empresa", metadatos.get('empresa', 'N/A'))
                            with col2:
                                st.metric("üìÖ A√±o", resultados_extractor['a√±o_documento'])
                            with col3:
                                st.metric("üìã Tipo", metadatos.get('tipo', 'N/A'))
                            with col4:
                                formato_txt = "Pre-2010 (PCG)" if resultados_extractor['formato'] == 'pre_2010' else "Post-2010 (NIIF)"
                                st.metric("üìä Formato", formato_txt)
                            
                            # Realizar an√°lisis vertical
                            with st.spinner("Realizando an√°lisis vertical..."):
                                analisis_vertical = analizador.analizador_vertical.analizar_desde_extractor(resultados_extractor)
                            
                            st.success("‚úÖ An√°lisis vertical completado")
                            
                            # Mostrar resumen
                            resumen = analisis_vertical.get('resumen', {})
                            st.info(f"üìä Total de estados analizados: {resumen.get('total_estados_analizados', 0)}")
                            
                            estados_analizados = analisis_vertical.get('estados_analizados', {})
                            
                            # TAB para cada estado financiero
                            tabs_estados = []
                            if 'balance' in estados_analizados:
                                tabs_estados.append("Balance/Situaci√≥n Financiera")
                            if 'resultados' in estados_analizados:
                                tabs_estados.append("Estado de Resultados")
                            if 'flujo' in estados_analizados:
                                tabs_estados.append("Flujo de Efectivo")
                            
                            if tabs_estados:
                                tabs_sub = st.tabs(tabs_estados)
                                tab_idx = 0
                                
                                # Balance / Situaci√≥n Financiera
                                if 'balance' in estados_analizados:
                                    with tabs_sub[tab_idx]:
                                        balance_data = estados_analizados['balance']
                                        st.write(f"#### üí∞ {balance_data['nombre_estado']}")
                                        st.write(f"**A√±o analizado:** {balance_data['a√±o_analisis']}")
                                        
                                        # M√©tricas principales
                                        col1, col2, col3 = st.columns(3)
                                        with col1:
                                            st.metric("Total Activos", f"{balance_data['total_activos']:,.0f}")
                                        with col2:
                                            st.metric("Total Pasivos", f"{balance_data['total_pasivos']:,.0f}")
                                        with col3:
                                            patrimonio = balance_data['total_activos'] - balance_data['total_pasivos']
                                            st.metric("Patrimonio", f"{patrimonio:,.0f}")
                                        
                                        # ACTIVOS
                                        if balance_data['activos']:
                                            st.write("##### üìä ACTIVOS - An√°lisis Vertical")
                                            st.caption("*Cada cuenta como % del Total de Activos*")
                                            
                                            df_activos = pd.DataFrame(balance_data['activos'])
                                            df_activos['Valor'] = df_activos['valor'].apply(lambda x: f"{x:,.0f}")
                                            df_activos['% Vertical'] = df_activos['analisis_vertical'].apply(lambda x: f"{x:.2f}%")
                                            
                                            df_mostrar = df_activos[['cuenta', 'Valor', '% Vertical']].copy()
                                            df_mostrar.columns = ['Cuenta', 'Valor', '% del Total Activos']
                                            
                                            st.dataframe(df_mostrar, use_container_width=True, height=400)
                                        
                                        # PASIVOS
                                        if balance_data['pasivos']:
                                            st.write("##### üí≥ PASIVOS - An√°lisis Vertical")
                                            st.caption("*Cada cuenta como % del Total de Pasivos*")
                                            
                                            df_pasivos = pd.DataFrame(balance_data['pasivos'])
                                            df_pasivos['Valor'] = df_pasivos['valor'].apply(lambda x: f"{x:,.0f}")
                                            df_pasivos['% Vertical'] = df_pasivos['analisis_vertical'].apply(lambda x: f"{x:.2f}%")
                                            
                                            df_mostrar_p = df_pasivos[['cuenta', 'Valor', '% Vertical']].copy()
                                            df_mostrar_p.columns = ['Cuenta', 'Valor', '% del Total Pasivos']
                                            
                                            st.dataframe(df_mostrar_p, use_container_width=True, height=400)
                                        
                                        st.info(f"‚ö†Ô∏è PATRIMONIO: No se calcula an√°lisis vertical (seg√∫n especificaci√≥n)")
                                    
                                    tab_idx += 1
                                
                                # Estado de Resultados
                                if 'resultados' in estados_analizados:
                                    with tabs_sub[tab_idx]:
                                        resultados_data = estados_analizados['resultados']
                                        st.write(f"#### üìà {resultados_data['nombre_estado']}")
                                        st.write(f"**A√±o analizado:** {resultados_data['a√±o_analisis']}")
                                        
                                        # M√©trica principal
                                        st.metric("Total Ingresos (Base)", f"{resultados_data['total_ingresos']:,.0f}")
                                        
                                        if resultados_data['cuentas_analizadas']:
                                            st.write("##### üìä An√°lisis Vertical")
                                            st.caption("*Cada cuenta como % del Total de Ingresos*")
                                            
                                            df_resultados = pd.DataFrame(resultados_data['cuentas_analizadas'])
                                            df_resultados['Valor'] = df_resultados['valor'].apply(lambda x: f"{x:,.0f}")
                                            df_resultados['% Vertical'] = df_resultados['analisis_vertical'].apply(lambda x: f"{x:.2f}%")
                                            
                                            df_mostrar_r = df_resultados[['cuenta', 'Valor', '% Vertical']].copy()
                                            df_mostrar_r.columns = ['Cuenta', 'Valor', '% de Ingresos']
                                            
                                            st.dataframe(df_mostrar_r, use_container_width=True, height=400)
                                    
                                    tab_idx += 1
                                
                                # Flujo de Efectivo
                                if 'flujo' in estados_analizados:
                                    with tabs_sub[tab_idx]:
                                        flujo_data = estados_analizados['flujo']
                                        st.write(f"#### üíµ {flujo_data['nombre_estado']}")
                                        st.write(f"**A√±o analizado:** {flujo_data['a√±o_analisis']}")
                                        
                                        if flujo_data['cuentas_analizadas']:
                                            st.write("##### üìä An√°lisis Vertical por Secciones")
                                            st.caption("*Cada cuenta como % de su base correspondiente (Operaci√≥n, Inversi√≥n, Financiaci√≥n)*")
                                            
                                            df_flujo = pd.DataFrame(flujo_data['cuentas_analizadas'])
                                            df_flujo['Valor'] = df_flujo['valor'].apply(lambda x: f"{x:,.0f}")
                                            df_flujo['% Vertical'] = df_flujo['analisis_vertical'].apply(lambda x: f"{x:.2f}%")
                                            
                                            df_mostrar_f = df_flujo[['cuenta', 'Valor', '% Vertical']].copy()
                                            df_mostrar_f.columns = ['Cuenta', 'Valor', '% de Base']
                                            
                                            st.dataframe(df_mostrar_f, use_container_width=True, height=400)
                        
                        else:
                            st.warning(f"‚ùå No se encontr√≥ el archivo HTML: {ruta_html}")
                    
                except Exception as e:
                    st.error(f"‚ùå Error en an√°lisis vertical: {str(e)}")
                    import traceback
                    st.code(traceback.format_exc())
            
            with tab5:
                st.subheader("üìä An√°lisis Vertical Consolidado")
                st.info("üîÑ Vista consolidada de an√°lisis vertical de m√∫ltiples a√±os (solo formato POST-2010 ‚â•2010)")
                
                try:
                    # Obtener todos los an√°lisis verticales realizados
                    analisis_vertical_list = []
                    
                    for resultado in resultados_analisis:
                        a√±o_doc = resultado.get('datos', {}).get('a√±o_documento', 0)
                        if a√±o_doc >= 2010:
                            # Extraer datos del extractor
                            datos_extractor = resultado.get('datos_extractor')
                            if datos_extractor:
                                # Realizar an√°lisis vertical
                                analisis_vert = analizador.analizador_vertical.analizar_desde_extractor(datos_extractor)
                                analisis_vertical_list.append(analisis_vert)
                    
                    if not analisis_vertical_list:
                        st.warning("‚ö†Ô∏è No hay archivos del formato POST-2010 (‚â•2010) para an√°lisis vertical consolidado")
                        st.info("Carga al menos 2 archivos POST-2010 para ver el an√°lisis consolidado")
                    elif len(analisis_vertical_list) < 2:
                        st.warning("‚ö†Ô∏è Se necesitan al menos 2 archivos POST-2010 para consolidar")
                        st.info(f"Actualmente tienes {len(analisis_vertical_list)} archivo(s). Carga m√°s para comparar.")
                    else:
                        st.success(f"‚úÖ {len(analisis_vertical_list)} archivos POST-2010 listos para consolidar")
                        
                        # Realizar consolidaci√≥n
                        with st.spinner("Consolidando an√°lisis vertical..."):
                            consolidado = analizador.consolidador_vertical.consolidar_analisis_vertical(analisis_vertical_list)
                        
                        if not consolidado:
                            st.error("‚ùå No se pudo consolidar el an√°lisis vertical")
                        else:
                            st.success("‚úÖ An√°lisis vertical consolidado generado")
                            
                            # Mostrar informaci√≥n
                            a√±os_consolidados = []
                            for av in analisis_vertical_list:
                                a√±os_consolidados.append(av['a√±o_documento'])
                            a√±os_consolidados.sort(reverse=True)
                            
                            st.info(f"üìÖ A√±os consolidados: {', '.join(map(str, a√±os_consolidados))}")
                            
                            # Tabs por estado financiero
                            estados_disponibles = list(consolidado.keys())
                            
                            if 'situacion_financiera_activos' in estados_disponibles or 'situacion_financiera_pasivos' in estados_disponibles:
                                tabs_estados = st.tabs([
                                    "üìä Situaci√≥n Financiera",
                                    "üí∞ Estado de Resultados" if 'resultados' in estados_disponibles else None,
                                    "üíµ Flujo de Efectivo" if 'flujo_efectivo' in estados_disponibles else None
                                ])
                                
                                # TAB: Situaci√≥n Financiera
                                with tabs_estados[0]:
                                    st.write("#### Estado de Situaci√≥n Financiera - An√°lisis Vertical Consolidado")
                                    
                                    # Sub-tabs para Activos y Pasivos
                                    sub_tabs = st.tabs(["üìà ACTIVOS", "üìâ PASIVOS"])
                                    
                                    # ACTIVOS
                                    with sub_tabs[0]:
                                        if 'situacion_financiera_activos' in consolidado:
                                            df_activos = consolidado['situacion_financiera_activos']
                                            
                                            st.write(f"**Total de cuentas:** {len(df_activos)}")
                                            
                                            # Formatear DataFrame para visualizaci√≥n
                                            df_display = df_activos.copy()
                                            columnas_a√±os = [col for col in df_display.columns if col != 'Cuenta']
                                            
                                            for col in columnas_a√±os:
                                                df_display[col] = df_display[col].apply(
                                                    lambda x: f"{x:.2f}%" if pd.notnull(x) else "N/A"
                                                )
                                            
                                            st.dataframe(
                                                df_display,
                                                use_container_width=True,
                                                height=500
                                            )
                                            
                                            # Gr√°ficos de tendencias
                                            st.divider()
                                            st.write("##### üìà Gr√°ficos de Tendencias")
                                            
                                            graficos = analizador.consolidador_vertical.generar_graficos_tendencias(
                                                df_activos,
                                                "Activos - Estado de Situaci√≥n Financiera",
                                                top_n=10
                                            )
                                            
                                            if graficos and len(graficos) >= 3:
                                                # Mostrar gr√°fico de l√≠neas (primer gr√°fico)
                                                st.plotly_chart(graficos[0], use_container_width=True)
                                                
                                                # Mostrar mapa de calor (segundo gr√°fico)
                                                st.plotly_chart(graficos[1], use_container_width=True)
                                            
                                            # Gr√°fico de barras de composici√≥n por a√±o
                                            st.divider()
                                            st.write("##### üìä Composici√≥n con a√±os - Activos")
                                            
                                            # Buscar las filas espec√≠ficas en el DataFrame con orden de prioridad
                                            # IMPORTANTE: Buscar primero las m√°s espec√≠ficas para evitar coincidencias incorrectas
                                            cuentas_buscar_orden = [
                                                ('Total Activos No Corrientes', ['TOTAL DE ACTIVOS NO CORRIENTES', 'TOTAL ACTIVOS NO CORRIENTES', 'TOTAL DE ACTIVO NO CORRIENTE', 'TOTAL ACTIVO NO CORRIENTE']),
                                                ('Total Activos Corrientes', ['TOTAL DE ACTIVOS CORRIENTES', 'TOTAL ACTIVOS CORRIENTES', 'TOTAL ACTIVO CORRIENTE']),
                                                ('TOTAL DE ACTIVOS', ['TOTAL DE ACTIVOS', 'TOTAL ACTIVOS', 'TOTAL ACTIVO'])
                                            ]
                                            
                                            datos_grafico = {}
                                            filas_usadas = set()  # Para evitar usar la misma fila dos veces
                                            
                                            for nombre_display, variantes in cuentas_buscar_orden:
                                                for idx, row in df_activos.iterrows():
                                                    if idx in filas_usadas:
                                                        continue
                                                    cuenta_upper = str(row['Cuenta']).strip().upper()
                                                    for variante in variantes:
                                                        if cuenta_upper == variante.upper():
                                                            datos_grafico[nombre_display] = row
                                                            filas_usadas.add(idx)
                                                            break
                                                    if nombre_display in datos_grafico:
                                                        break
                                            
                                            if len(datos_grafico) == 3 and len(columnas_a√±os) > 0:
                                                import plotly.graph_objects as go
                                                
                                                fig = go.Figure()
                                                a√±os_sorted = sorted(columnas_a√±os, reverse=True)
                                                
                                                # Agregar las 3 barras por a√±o
                                                for nombre, row in datos_grafico.items():
                                                    valores = [row[a√±o] if pd.notnull(row[a√±o]) else 0 for a√±o in a√±os_sorted]
                                                    fig.add_trace(go.Bar(
                                                        name=nombre,
                                                        x=[str(a√±o) for a√±o in a√±os_sorted],
                                                        y=valores,
                                                        text=[f"{v:.1f}%" if v != 0 else "" for v in valores],
                                                        textposition='auto'
                                                    ))
                                                
                                                fig.update_layout(
                                                    title="Composici√≥n con a√±os - Activos",
                                                    xaxis_title="A√±o",
                                                    yaxis_title="An√°lisis Vertical (%)",
                                                    barmode='group',
                                                    height=450,
                                                    showlegend=True,
                                                    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
                                                )
                                                
                                                st.plotly_chart(fig, use_container_width=True)
                                            else:
                                                st.info(f"‚ö†Ô∏è No se encontraron todas las cuentas requeridas. Encontradas: {list(datos_grafico.keys())}")
                                        else:
                                            st.warning("No hay datos de activos consolidados")
                                    
                                    # PASIVOS
                                    with sub_tabs[1]:
                                        if 'situacion_financiera_pasivos' in consolidado:
                                            df_pasivos = consolidado['situacion_financiera_pasivos']
                                            
                                            st.write(f"**Total de cuentas:** {len(df_pasivos)}")
                                            
                                            # Formatear DataFrame
                                            df_display = df_pasivos.copy()
                                            columnas_a√±os = [col for col in df_display.columns if col != 'Cuenta']
                                            
                                            for col in columnas_a√±os:
                                                df_display[col] = df_display[col].apply(
                                                    lambda x: f"{x:.2f}%" if pd.notnull(x) else "N/A"
                                                )
                                            
                                            st.dataframe(
                                                df_display,
                                                use_container_width=True,
                                                height=500
                                            )
                                            
                                            # Gr√°ficos de tendencias
                                            st.divider()
                                            st.write("##### üìà Gr√°ficos de Tendencias")
                                            
                                            graficos = analizador.consolidador_vertical.generar_graficos_tendencias(
                                                df_pasivos,
                                                "Pasivos - Estado de Situaci√≥n Financiera",
                                                top_n=10
                                            )
                                            
                                            if graficos and len(graficos) >= 3:
                                                # Mostrar gr√°fico de l√≠neas (primer gr√°fico)
                                                st.plotly_chart(graficos[0], use_container_width=True)
                                                
                                                # Mostrar mapa de calor (segundo gr√°fico)
                                                st.plotly_chart(graficos[1], use_container_width=True)
                                            
                                            # Gr√°fico de barras de composici√≥n por a√±o
                                            st.divider()
                                            st.write("##### üìä Composici√≥n con a√±os - Pasivos")
                                            
                                            # Buscar las filas espec√≠ficas en el DataFrame con orden de prioridad
                                            # IMPORTANTE: Buscar primero las m√°s espec√≠ficas para evitar coincidencias incorrectas
                                            cuentas_buscar_orden = [
                                                ('Total Pasivos No Corrientes', ['TOTAL DE PASIVOS NO CORRIENTES', 'TOTAL PASIVOS NO CORRIENTES', 'TOTAL DE PASIVO NO CORRIENTE', 'TOTAL PASIVO NO CORRIENTE']),
                                                ('Total Pasivos Corrientes', ['TOTAL DE PASIVOS CORRIENTES', 'TOTAL PASIVOS CORRIENTES', 'TOTAL PASIVO CORRIENTE']),
                                                ('Total Pasivos', ['TOTAL DE PASIVOS', 'TOTAL PASIVOS', 'TOTAL PASIVO'])
                                            ]
                                            
                                            datos_grafico = {}
                                            filas_usadas = set()  # Para evitar usar la misma fila dos veces
                                            
                                            for nombre_display, variantes in cuentas_buscar_orden:
                                                for idx, row in df_pasivos.iterrows():
                                                    if idx in filas_usadas:
                                                        continue
                                                    cuenta_upper = str(row['Cuenta']).strip().upper()
                                                    for variante in variantes:
                                                        if cuenta_upper == variante.upper():
                                                            datos_grafico[nombre_display] = row
                                                            filas_usadas.add(idx)
                                                            break
                                                    if nombre_display in datos_grafico:
                                                        break
                                            
                                            if len(datos_grafico) == 3 and len(columnas_a√±os) > 0:
                                                import plotly.graph_objects as go
                                                
                                                fig = go.Figure()
                                                a√±os_sorted = sorted(columnas_a√±os, reverse=True)
                                                
                                                # Agregar las 3 barras por a√±o
                                                for nombre, row in datos_grafico.items():
                                                    valores = [row[a√±o] if pd.notnull(row[a√±o]) else 0 for a√±o in a√±os_sorted]
                                                    fig.add_trace(go.Bar(
                                                        name=nombre,
                                                        x=[str(a√±o) for a√±o in a√±os_sorted],
                                                        y=valores,
                                                        text=[f"{v:.1f}%" if v != 0 else "" for v in valores],
                                                        textposition='auto'
                                                    ))
                                                
                                                fig.update_layout(
                                                    title="Composici√≥n con a√±os - Pasivos",
                                                    xaxis_title="A√±o",
                                                    yaxis_title="An√°lisis Vertical (%)",
                                                    barmode='group',
                                                    height=450,
                                                    showlegend=True,
                                                    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
                                                )
                                                
                                                st.plotly_chart(fig, use_container_width=True)
                                            else:
                                                st.info(f"‚ö†Ô∏è No se encontraron todas las cuentas requeridas. Encontradas: {list(datos_grafico.keys())}")
                                        else:
                                            st.warning("No hay datos de pasivos consolidados")
                                
                                # TAB: Estado de Resultados
                                if 'resultados' in estados_disponibles:
                                    with tabs_estados[1]:
                                        st.write("#### Estado de Resultados - An√°lisis Vertical Consolidado")
                                        
                                        df_resultados = consolidado['resultados']
                                        st.write(f"**Total de cuentas:** {len(df_resultados)}")
                                        
                                        # Formatear DataFrame
                                        df_display = df_resultados.copy()
                                        columnas_a√±os = [col for col in df_display.columns if col != 'Cuenta']
                                        
                                        for col in columnas_a√±os:
                                            df_display[col] = df_display[col].apply(
                                                lambda x: f"{x:.2f}%" if pd.notnull(x) else "N/A"
                                            )
                                        
                                        st.dataframe(
                                            df_display,
                                            use_container_width=True,
                                            height=500
                                        )
                                        
                                        # Gr√°ficos
                                        st.divider()
                                        st.write("##### üìà Gr√°ficos de Tendencias")
                                        
                                        graficos = analizador.consolidador_vertical.generar_graficos_tendencias(
                                            df_resultados,
                                            "Estado de Resultados",
                                            top_n=10
                                        )
                                        
                                        if graficos:
                                            for fig in graficos:
                                                st.plotly_chart(fig, use_container_width=True)
                                
                                # TAB: Flujo de Efectivo
                                if 'flujo_efectivo' in estados_disponibles:
                                    with tabs_estados[2]:
                                        st.write("#### Flujo de Efectivo - An√°lisis Vertical Consolidado")
                                        
                                        df_flujo = consolidado['flujo_efectivo']
                                        st.write(f"**Total de cuentas:** {len(df_flujo)}")
                                        
                                        # Formatear DataFrame
                                        df_display = df_flujo.copy()
                                        columnas_a√±os = [col for col in df_display.columns if col != 'Cuenta']
                                        
                                        for col in columnas_a√±os:
                                            df_display[col] = df_display[col].apply(
                                                lambda x: f"{x:.2f}%" if pd.notnull(x) else "N/A"
                                            )
                                        
                                        st.dataframe(
                                            df_display,
                                            use_container_width=True,
                                            height=500
                                        )
                            
                            # Bot√≥n de descarga Excel
                            st.divider()
                            if st.button("üì• Exportar An√°lisis Vertical Consolidado a Excel", key="btn_export_av_consolidado"):
                                archivo_salida = "analisis_vertical_consolidado.xlsx"
                                analizador.consolidador_vertical.exportar_consolidado_excel(consolidado, archivo_salida)
                                st.success(f"‚úÖ Archivo exportado: {archivo_salida}")
                
                except Exception as e:
                    st.error(f"‚ùå Error en an√°lisis vertical consolidado: {str(e)}")
                    import traceback
                    st.code(traceback.format_exc())
            
            with tab6:
                st.subheader("üìä An√°lisis Horizontal Consolidado")
                st.info("üìà Vista consolidada de variaciones interanuales (POST-2010 ‚â•2010)")
                
                try:
                    # Filtrar solo archivos POST-2010 con an√°lisis horizontal
                    archivos_post_2010_ah = [
                        r for r in resultados_analisis 
                        if r.get('datos', {}).get('a√±o_documento', 0) >= 2010 
                        and r.get('analisis_horizontal') is not None
                    ]
                    
                    if len(archivos_post_2010_ah) < 2:
                        st.warning("‚ö†Ô∏è Se necesitan al menos 2 archivos POST-2010 para consolidar an√°lisis horizontal")
                        st.info("El an√°lisis horizontal consolidado compara las variaciones de m√∫ltiples per√≠odos")
                    else:
                        st.success(f"‚úÖ {len(archivos_post_2010_ah)} archivos disponibles para consolidaci√≥n")
                        
                        # Extraer an√°lisis horizontal de cada archivo
                        analisis_horizontal_list = [r['analisis_horizontal'] for r in archivos_post_2010_ah]
                        
                        # Consolidar an√°lisis horizontal
                        with st.spinner("Consolidando an√°lisis horizontal..."):
                            consolidado_ah = analizador.consolidador_horizontal.consolidar_analisis_horizontal(
                                analisis_horizontal_list
                            )
                        
                        if not consolidado_ah:
                            st.warning("‚ö†Ô∏è No se pudo consolidar el an√°lisis horizontal")
                        else:
                            st.success(f"‚úÖ Consolidaci√≥n completada: {len(consolidado_ah)} estados procesados")
                            
                            # Crear sub-tabs por estado
                            estados_disponibles = list(consolidado_ah.keys())
                            
                            if 'situacion_financiera' in estados_disponibles:
                                sub_tabs_ah = st.tabs([
                                    "üíº Situaci√≥n Financiera",
                                    "üìä Estado de Resultados",
                                    "üí∞ Flujo de Efectivo"
                                ])
                                
                                # Tab Situaci√≥n Financiera
                                with sub_tabs_ah[0]:
                                    if 'situacion_financiera' in consolidado_ah:
                                        st.markdown("#### Estado de Situaci√≥n Financiera - Consolidado")
                                        df_sf = consolidado_ah['situacion_financiera']
                                        
                                        # Mostrar tabla
                                        st.dataframe(
                                            df_sf.style.format(
                                                {col: "{:+.2f}%" for col in df_sf.columns if col != 'Cuenta'},
                                                na_rep="N/A"
                                            ),
                                            use_container_width=True,
                                            height=400
                                        )
                                        
                                        st.markdown(f"**Total de cuentas:** {len(df_sf)}")
                                        
                                        # Gr√°ficos (sin cascada, barras con colores por a√±o)
                                        st.markdown("---")
                                        st.markdown("#### üìà Gr√°ficos de Tendencias")
                                        
                                        graficos_sf = analizador.consolidador_horizontal.generar_graficos_tendencias(
                                            df_sf,
                                            "Situaci√≥n Financiera",
                                            top_n=10
                                        )
                                        
                                        # Mostrar solo los primeros 3 gr√°ficos (sin cascada)
                                        for i, fig in enumerate(graficos_sf[:3], 1):
                                            st.plotly_chart(fig, use_container_width=True)
                                
                                # Tab Estado de Resultados
                                with sub_tabs_ah[1]:
                                    if 'resultados' in consolidado_ah:
                                        st.markdown("#### Estado de Resultados - Consolidado")
                                        df_res = consolidado_ah['resultados']
                                        
                                        st.dataframe(
                                            df_res.style.format(
                                                {col: "{:+.2f}%" for col in df_res.columns if col != 'Cuenta'},
                                                na_rep="N/A"
                                            ),
                                            use_container_width=True,
                                            height=400
                                        )
                                        
                                        st.markdown(f"**Total de cuentas:** {len(df_res)}")
                                        
                                        # Gr√°ficos (solo l√≠neas y heatmap, sin barras)
                                        st.markdown("---")
                                        st.markdown("#### üìà Gr√°ficos de Tendencias")
                                        
                                        graficos_res = analizador.consolidador_horizontal.generar_graficos_tendencias(
                                            df_res,
                                            "Estado de Resultados",
                                            top_n=10
                                        )
                                        
                                        # Mostrar solo los primeros 2 gr√°ficos (l√≠neas y heatmap)
                                        for i, fig in enumerate(graficos_res[:2], 1):
                                            st.plotly_chart(fig, use_container_width=True)
                                    else:
                                        st.info("No hay datos de estado de resultados disponibles")
                                
                                # Tab Flujo de Efectivo
                                with sub_tabs_ah[2]:
                                    if 'flujo_efectivo' in consolidado_ah:
                                        st.markdown("#### Flujo de Efectivo - Consolidado")
                                        df_flujo = consolidado_ah['flujo_efectivo']
                                        
                                        st.dataframe(
                                            df_flujo.style.format(
                                                {col: "{:+.2f}%" for col in df_flujo.columns if col != 'Cuenta'},
                                                na_rep="N/A"
                                            ),
                                            use_container_width=True,
                                            height=400
                                        )
                                        
                                        st.markdown(f"**Total de cuentas:** {len(df_flujo)}")
                                        # No mostrar gr√°ficos para Flujo de Efectivo
                                    else:
                                        st.info("No hay datos de flujo de efectivo disponibles")
                            
                            # Bot√≥n de exportaci√≥n
                            st.markdown("---")
                            st.markdown("#### üíæ Exportar Consolidado")
                            
                            if st.button("üì• Descargar Excel - An√°lisis Horizontal Consolidado"):
                                archivo_salida = "analisis_horizontal_consolidado.xlsx"
                                analizador.consolidador_horizontal.exportar_consolidado_excel(
                                    consolidado_ah,
                                    archivo_salida
                                )
                                st.success(f"‚úÖ Archivo exportado: {archivo_salida}")
                
                except Exception as e:
                    st.error(f"‚ùå Error en an√°lisis horizontal consolidado: {str(e)}")
                    import traceback
                    st.code(traceback.format_exc())
            
            with tab4:
                st.subheader("üìà An√°lisis Horizontal Mejorado")
                st.info("üìä An√°lisis horizontal a√±o a a√±o (solo formato POST-2010 ‚â•2010)")
                
                try:
                    # Filtrar solo archivos POST-2010
                    archivos_post_2010 = [
                        r for r in resultados_analisis 
                        if r.get('datos', {}).get('a√±o_documento', 0) >= 2010
                    ]
                    
                    if not archivos_post_2010:
                        st.warning("‚ö†Ô∏è No hay archivos del formato POST-2010 (‚â•2010) para an√°lisis horizontal")
                        st.info("El an√°lisis horizontal solo est√° disponible para archivos de a√±os 2010 en adelante")
                    else:
                        st.success(f"‚úÖ {len(archivos_post_2010)} archivo(s) POST-2010 encontrado(s)")
                        
                        # Crear opciones del selector con formato "Empresa - A√±o"
                        opciones_selector = {}
                        for r in archivos_post_2010:
                            a√±o_doc = r.get('datos', {}).get('a√±o_documento', 'N/A')
                            empresa = r.get('datos', {}).get('metadatos', {}).get('empresa', 'No identificada')
                            etiqueta = f"{empresa} - {a√±o_doc}"
                            opciones_selector[etiqueta] = r['archivo']
                        
                        # Selector de archivo con etiquetas de empresa-a√±o
                        archivo_seleccionado_label = st.selectbox(
                            "Selecciona una empresa y a√±o para an√°lisis horizontal:",
                            list(opciones_selector.keys()),
                            key="selector_horizontal"
                        )
                        
                        # Obtener el archivo correspondiente
                        archivo_seleccionado = opciones_selector[archivo_seleccionado_label]
                        
                        # Obtener resultado seleccionado
                        resultado_sel = next(r for r in archivos_post_2010 if r['archivo'] == archivo_seleccionado)
                        datos_extractor = resultado_sel.get('datos_extractor', {})
                        
                        if datos_extractor and datos_extractor.get('estados'):
                            # Realizar an√°lisis horizontal
                            with st.spinner("Realizando an√°lisis horizontal..."):
                                analisis_horizontal_resultados = analizador.analizador_horizontal.analizar_desde_extractor(datos_extractor)
                            
                            if 'error' in analisis_horizontal_resultados:
                                st.error(f"‚ùå {analisis_horizontal_resultados['error']}")
                            else:
                                st.success("‚úÖ An√°lisis horizontal completado")
                                
                                # Mostrar informaci√≥n general
                                col1, col2, col3 = st.columns(3)
                                with col1:
                                    st.metric("Empresa", analisis_horizontal_resultados['empresa'])
                                with col2:
                                    st.metric("A√±o Documento", analisis_horizontal_resultados['a√±o_documento'])
                                with col3:
                                    st.metric("Estados Analizados", len(analisis_horizontal_resultados['estados_analizados']))
                                
                                st.divider()
                                
                                # Tabs para cada estado financiero
                                estados_disponibles = list(analisis_horizontal_resultados['estados_analizados'].keys())
                                
                                if estados_disponibles:
                                    tabs_estados = st.tabs([
                                        "üìä Estado de Situaci√≥n Financiera" if 'balance' in estados_disponibles else None,
                                        "üí∞ Estado de Resultados" if 'resultados' in estados_disponibles else None,
                                        "üíµ Flujo de Efectivo" if 'flujo' in estados_disponibles else None
                                    ])
                                    
                                    # Estado de Situaci√≥n Financiera
                                    if 'balance' in estados_disponibles:
                                        with tabs_estados[0]:
                                            balance_ah = analisis_horizontal_resultados['estados_analizados']['balance']
                                            
                                            st.write(f"**A√±o Base:** {balance_ah['a√±o_base']} | **A√±o Actual:** {balance_ah['a√±o_actual']}")
                                            st.write(f"**Total Cuentas:** {balance_ah['total_cuentas_analizadas']}")
                                            
                                            # Estad√≠sticas
                                            col1, col2, col3, col4 = st.columns(4)
                                            stats = balance_ah['estadisticas']
                                            with col1:
                                                st.metric("‚úÖ Aumentos", stats['variaciones_positivas'], delta="Positivo")
                                            with col2:
                                                st.metric("‚¨áÔ∏è Disminuciones", stats['variaciones_negativas'], delta="Negativo")
                                            with col3:
                                                st.metric("‚ûñ Sin Cambio", stats['sin_variacion'])
                                            with col4:
                                                st.metric("‚ö†Ô∏è N/A", stats['no_calculables'])
                                            
                                            st.divider()
                                            
                                            # Tabla de an√°lisis horizontal
                                            st.write("##### üìä An√°lisis Horizontal Detallado")
                                            
                                            df_balance = pd.DataFrame(balance_ah['cuentas_analizadas'])
                                            
                                            # Formatear DataFrame
                                            df_display = df_balance.copy()
                                            df_display['valor_a√±o_base'] = df_display['valor_a√±o_base'].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "0")
                                            df_display['valor_a√±o_actual'] = df_display['valor_a√±o_actual'].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "0")
                                            df_display['variacion_absoluta'] = df_display['variacion_absoluta'].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "N/A")
                                            df_display['analisis_horizontal'] = df_display['analisis_horizontal'].apply(
                                                lambda x: f"{x:+.2f}%" if pd.notnull(x) else "N/A"
                                            )
                                            
                                            # Renombrar columnas
                                            df_display = df_display.rename(columns={
                                                'cuenta': 'Cuenta',
                                                'valor_a√±o_base': f'Valor {balance_ah["a√±o_base"]}',
                                                'valor_a√±o_actual': f'Valor {balance_ah["a√±o_actual"]}',
                                                'variacion_absoluta': 'Variaci√≥n Absoluta',
                                                'analisis_horizontal': 'An√°lisis Horizontal (%)',
                                                'estado_variacion': 'Estado'
                                            })
                                            
                                            st.dataframe(
                                                df_display[['Cuenta', f'Valor {balance_ah["a√±o_base"]}', f'Valor {balance_ah["a√±o_actual"]}', 'Variaci√≥n Absoluta', 'An√°lisis Horizontal (%)']],
                                                use_container_width=True,
                                                height=400
                                            )
                                    
                                    # Estado de Resultados
                                    if 'resultados' in estados_disponibles:
                                        tab_idx = 1 if 'balance' in estados_disponibles else 0
                                        with tabs_estados[tab_idx]:
                                            resultados_ah = analisis_horizontal_resultados['estados_analizados']['resultados']
                                            
                                            st.write(f"**A√±o Base:** {resultados_ah['a√±o_base']} | **A√±o Actual:** {resultados_ah['a√±o_actual']}")
                                            st.write(f"**Total Cuentas:** {resultados_ah['total_cuentas_analizadas']}")
                                            
                                            # Estad√≠sticas
                                            col1, col2, col3, col4 = st.columns(4)
                                            stats = resultados_ah['estadisticas']
                                            with col1:
                                                st.metric("‚úÖ Aumentos", stats['variaciones_positivas'], delta="Positivo")
                                            with col2:
                                                st.metric("‚¨áÔ∏è Disminuciones", stats['variaciones_negativas'], delta="Negativo")
                                            with col3:
                                                st.metric("‚ûñ Sin Cambio", stats['sin_variacion'])
                                            with col4:
                                                st.metric("‚ö†Ô∏è N/A", stats['no_calculables'])
                                            
                                            st.divider()
                                            
                                            # Tabla de an√°lisis horizontal
                                            st.write("##### üí∞ An√°lisis Horizontal Detallado")
                                            
                                            df_resultados = pd.DataFrame(resultados_ah['cuentas_analizadas'])
                                            
                                            # Formatear DataFrame
                                            df_display = df_resultados.copy()
                                            df_display['valor_a√±o_base'] = df_display['valor_a√±o_base'].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "0")
                                            df_display['valor_a√±o_actual'] = df_display['valor_a√±o_actual'].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "0")
                                            df_display['variacion_absoluta'] = df_display['variacion_absoluta'].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "N/A")
                                            df_display['analisis_horizontal'] = df_display['analisis_horizontal'].apply(
                                                lambda x: f"{x:+.2f}%" if pd.notnull(x) else "N/A"
                                            )
                                            
                                            # Renombrar columnas
                                            df_display = df_display.rename(columns={
                                                'cuenta': 'Cuenta',
                                                'valor_a√±o_base': f'Valor {resultados_ah["a√±o_base"]}',
                                                'valor_a√±o_actual': f'Valor {resultados_ah["a√±o_actual"]}',
                                                'variacion_absoluta': 'Variaci√≥n Absoluta',
                                                'analisis_horizontal': 'An√°lisis Horizontal (%)',
                                                'estado_variacion': 'Estado'
                                            })
                                            
                                            st.dataframe(
                                                df_display[['Cuenta', f'Valor {resultados_ah["a√±o_base"]}', f'Valor {resultados_ah["a√±o_actual"]}', 'Variaci√≥n Absoluta', 'An√°lisis Horizontal (%)']],
                                                use_container_width=True,
                                                height=400
                                            )
                                    
                                    # Flujo de Efectivo
                                    if 'flujo' in estados_disponibles:
                                        tab_idx = 2 if 'balance' in estados_disponibles and 'resultados' in estados_disponibles else (1 if 'balance' in estados_disponibles or 'resultados' in estados_disponibles else 0)
                                        with tabs_estados[tab_idx]:
                                            flujo_ah = analisis_horizontal_resultados['estados_analizados']['flujo']
                                            
                                            st.write(f"**A√±o Base:** {flujo_ah['a√±o_base']} | **A√±o Actual:** {flujo_ah['a√±o_actual']}")
                                            st.write(f"**Total Cuentas:** {flujo_ah['total_cuentas_analizadas']}")
                                            
                                            # Estad√≠sticas
                                            col1, col2, col3, col4 = st.columns(4)
                                            stats = flujo_ah['estadisticas']
                                            with col1:
                                                st.metric("‚úÖ Aumentos", stats['variaciones_positivas'], delta="Positivo")
                                            with col2:
                                                st.metric("‚¨áÔ∏è Disminuciones", stats['variaciones_negativas'], delta="Negativo")
                                            with col3:
                                                st.metric("‚ûñ Sin Cambio", stats['sin_variacion'])
                                            with col4:
                                                st.metric("‚ö†Ô∏è N/A", stats['no_calculables'])
                                            
                                            st.divider()
                                            
                                            # Tabla de an√°lisis horizontal
                                            st.write("##### üíµ An√°lisis Horizontal Detallado")
                                            
                                            df_flujo = pd.DataFrame(flujo_ah['cuentas_analizadas'])
                                            
                                            # Formatear DataFrame
                                            df_display = df_flujo.copy()
                                            df_display['valor_a√±o_base'] = df_display['valor_a√±o_base'].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "0")
                                            df_display['valor_a√±o_actual'] = df_display['valor_a√±o_actual'].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "0")
                                            df_display['variacion_absoluta'] = df_display['variacion_absoluta'].apply(lambda x: f"{x:,.0f}" if pd.notnull(x) else "N/A")
                                            df_display['analisis_horizontal'] = df_display['analisis_horizontal'].apply(
                                                lambda x: f"{x:+.2f}%" if pd.notnull(x) else "N/A"
                                            )
                                            
                                            # Renombrar columnas
                                            df_display = df_display.rename(columns={
                                                'cuenta': 'Cuenta',
                                                'valor_a√±o_base': f'Valor {flujo_ah["a√±o_base"]}',
                                                'valor_a√±o_actual': f'Valor {flujo_ah["a√±o_actual"]}',
                                                'variacion_absoluta': 'Variaci√≥n Absoluta',
                                                'analisis_horizontal': 'An√°lisis Horizontal (%)',
                                                'estado_variacion': 'Estado'
                                            })
                                            
                                            st.dataframe(
                                                df_display[['Cuenta', f'Valor {flujo_ah["a√±o_base"]}', f'Valor {flujo_ah["a√±o_actual"]}', 'Variaci√≥n Absoluta', 'An√°lisis Horizontal (%)']],
                                                use_container_width=True,
                                                height=400
                                            )
                                
                                st.divider()
                                
                                # Bot√≥n de descarga Excel
                                if st.button("üì• Exportar An√°lisis Horizontal a Excel", key="btn_export_horizontal"):
                                    nombre_archivo = f"analisis_horizontal_{archivo_seleccionado.split('.')[0]}.xlsx"
                                    analizador.analizador_horizontal.exportar_a_excel(analisis_horizontal_resultados, nombre_archivo)
                                    st.success(f"‚úÖ Archivo exportado: {nombre_archivo}")
                        
                        else:
                            st.warning("‚ö†Ô∏è No hay datos extra√≠dos disponibles para este archivo")
                
                except Exception as e:
                    st.error(f"‚ùå Error en an√°lisis horizontal: {str(e)}")
                    import traceback
                    st.code(traceback.format_exc())
            
            with tab8:
                st.subheader("Datos detallados por archivo")
                
                for resultado in resultados_analisis:
                    with st.expander(f"Ver detalles de {resultado['archivo']}"):
                        st.json(resultado['datos'], expanded=False)
        
        # Bot√≥n para descargar resultados
        if resultados_analisis:
            st.header("üíæ Exportar Resultados")
            
            # Crear DataFrame consolidado para descarga
            datos_exportar = []
            for resultado in resultados_analisis:
                base_row = {
                    'archivo': resultado['archivo'],
                    'empresa': resultado['resumen']['empresa'],
                    'a√±o': resultado['resumen']['a√±o_reporte'],
                    'tipo': resultado['resumen']['tipo_reporte']
                }
                
                # Agregar datos por estado financiero
                estados_financieros = resultado['datos'].get('estados_financieros', {})
                for clave_estado, info_estado in estados_financieros.items():
                    for item in info_estado.get('datos', []):
                        row = base_row.copy()
                        row['estado_financiero'] = info_estado['nombre']
                        row['cuenta'] = item.get('cuenta', '')
                        
                        # Agregar todas las columnas
                        for clave, valor in item.items():
                            if clave != 'cuenta':
                                if isinstance(valor, dict):
                                    row[f'{clave}_texto'] = valor.get('texto', '')
                                    row[f'{clave}_numero'] = valor.get('numero', 0)
                                else:
                                    row[clave] = valor
                        
                        datos_exportar.append(row)
            
            if datos_exportar:
                df_exportar = pd.DataFrame(datos_exportar)
                
                # Convertir a CSV para descarga
                csv = df_exportar.to_csv(index=False, encoding='utf-8')
                
                st.download_button(
                    label="üì• Descargar resultados en CSV",
                    data=csv,
                    file_name=f"analisis_financiero_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
    
    else:
        st.info("üëÜ Sube uno o m√°s archivos XLS para comenzar el an√°lisis")
        
        # Mostrar informaci√≥n sobre los estados financieros detectados
        with st.expander("üìö Estados financieros que se pueden detectar"):
            st.write("""
            El sistema puede identificar y analizar los siguientes estados financieros:
            
            - **Estado de Situaci√≥n Financiera** (Balance General)
            - **Estado de Resultados** (Estado de Ganancias y P√©rdidas)
            - **Estado de Cambios en el Patrimonio Neto**
            - **Estado de Flujo de Efectivo**
            - **Estado de Resultados Integrales**
            
            El sistema detecta autom√°ticamente el tipo de estado financiero basado en:
            - T√≠tulos y encabezados en el documento
            - Contexto de las tablas
            - Patrones de texto caracter√≠sticos
            """)
        
        # Mostrar informaci√≥n sobre las cabeceras
        with st.expander("üè∑Ô∏è Manejo de cabeceras de columnas"):
            st.write("""
            El sistema identifica autom√°ticamente las cabeceras de las columnas:
            
            - **A√±os**: 2024, 2023, 2022, etc.
            - **Notas**: Referencias a notas explicativas
            - **Descripciones**: Cuenta, Descripci√≥n, etc.
            - **Valores**: Importes en diferentes monedas
            
            Las cabeceras se extraen de:
            - Elementos `<th>` en las tablas HTML
            - Primera fila de datos cuando no hay `<th>`
            - Detecci√≥n inteligente de a√±os y t√©rminos financieros
            """)

if __name__ == "__main__":
    main()