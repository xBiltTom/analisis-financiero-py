"""
Prueba del an√°lisis vertical con archivo real de a√±os ‚â§2009
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from analizador_financiero import AnalizadorFinanciero
from analisis_vertical_horizontal import AnalisisVerticalHorizontal

def probar_archivo_real_2009():
    """Probar an√°lisis vertical con archivo real de a√±os ‚â§2009"""
    print("üß™ PRUEBA CON ARCHIVO REAL DE A√ëOS ‚â§2009")
    print("=" * 60)
    
    # Crear analizador
    analizador = AnalizadorFinanciero()
    analizador_vertical = AnalisisVerticalHorizontal()
    
    # Archivo de prueba (2004-2003)
    archivo_html = "temp/ReporteDetalleInformacionFinanciero (6).html"
    
    if not os.path.exists(archivo_html):
        print(f"‚ùå No se encontr√≥ el archivo: {archivo_html}")
        return
    
    print(f"üìÑ Analizando archivo: {archivo_html}")
    print("   A√±os esperados: 2004, 2003")
    print()
    
    # Extraer datos del archivo
    print("‚è≥ Extrayendo datos del archivo HTML...")
    datos_extraidos = analizador.extraer_datos_html(archivo_html)
    
    if not datos_extraidos:
        print("‚ùå No se pudieron extraer datos del archivo")
        return
    
    # Mostrar informaci√≥n b√°sica
    print("‚úÖ Datos extra√≠dos exitosamente")
    print(f"üìä A√±o documento: {datos_extraidos.get('a√±o_documento', 'No detectado')}")
    print(f"üìÖ A√±os disponibles: {datos_extraidos.get('a√±os_disponibles', [])}")
    print(f"üè¢ Empresa: {datos_extraidos.get('metadatos', {}).get('empresa', 'No detectada')}")
    print()
    
    # Verificar estados financieros detectados
    estados_financieros = datos_extraidos.get('estados_financieros', {})
    print("üìã Estados financieros detectados:")
    for clave, info in estados_financieros.items():
        if info.get('datos'):
            print(f"   ‚úÖ {info['nombre']}: {len(info['datos'])} cuentas")
        else:
            print(f"   ‚ùå {info['nombre']}: Sin datos")
    print()
    
    # Preparar datos para an√°lisis vertical
    resultados_analisis = [{
        'archivo': 'ReporteDetalleInformacionFinanciero (6).html',
        'datos': datos_extraidos,
        'resumen': {
            'empresa': datos_extraidos.get('metadatos', {}).get('empresa', 'COMPA√ë√çA UNIVERSAL TEXTIL S.A.'),
            'a√±o_reporte': datos_extraidos.get('metadatos', {}).get('a√±o', '2004'),
            'a√±os_disponibles': datos_extraidos.get('a√±os_disponibles', ['2004', '2003'])
        }
    }]
    
    # Realizar an√°lisis vertical
    a√±os_para_analisis = datos_extraidos.get('a√±os_disponibles', ['2004', '2003'])
    print(f"üîç Realizando an√°lisis vertical para a√±os: {a√±os_para_analisis}")
    print()
    
    try:
        resultados_vertical = analizador_vertical.realizar_analisis_vertical_situacion_financiera(
            resultados_analisis, a√±os_para_analisis
        )
        
        # Mostrar resultados
        print("üìà RESULTADOS DEL AN√ÅLISIS VERTICAL")
        print("=" * 50)
        
        if resultados_vertical['errores']:
            print("‚ùå ERRORES ENCONTRADOS:")
            for error in resultados_vertical['errores']:
                print(f"   - {error}")
            print()
        
        if resultados_vertical['analisis_por_a√±o']:
            print(f"‚úÖ An√°lisis completado para {len(resultados_vertical['analisis_por_a√±o'])} a√±o(s)")
            print()
            
            for a√±o, datos_a√±o in resultados_vertical['analisis_por_a√±o'].items():
                print(f"üìÖ A√ëO {a√±o}")
                print("-" * 30)
                
                # Totales principales
                print(f"üí∞ Total Activos: {datos_a√±o['activos']['total_activos']:,.2f}")
                print(f"üí≥ Total Pasivos: {datos_a√±o['pasivos']['total_pasivos']:,.2f}")  
                print(f"üèõÔ∏è Total Patrimonio: {datos_a√±o['patrimonio']['total_patrimonio']:,.2f}")
                print()
                
                # Verificaci√≥n de equilibrio contable
                verificacion = datos_a√±o['verificacion']
                print(f"‚öñÔ∏è Equilibrio Contable: {'‚úÖ S√ç' if verificacion['equilibrio_contable'] else '‚ùå NO'}")
                print(f"üìä Diferencia: {verificacion['diferencia']:,.2f}")
                print()
                
                # Mostrar estructura detallada
                print("üìä ESTRUCTURA DETALLADA:")
                print()
                
                # Activos
                if datos_a√±o['activos']['cuentas']:
                    print("üí∞ ACTIVOS (% del Total de Activos):")
                    for activo in datos_a√±o['activos']['cuentas']:
                        print(f"   ‚Ä¢ {activo['cuenta']}: {activo['valor']:,.0f} ({activo['porcentaje_vertical']:.2f}%)")
                    print()
                
                # Pasivos
                if datos_a√±o['pasivos']['cuentas']:
                    print("üí≥ PASIVOS (% del Total de Pasivos):")
                    for pasivo in datos_a√±o['pasivos']['cuentas']:
                        print(f"   ‚Ä¢ {pasivo['cuenta']}: {pasivo['valor']:,.0f} ({pasivo['porcentaje_vertical']:.2f}%)")
                    print()
                
                # Patrimonio
                if datos_a√±o['patrimonio']['cuentas']:
                    print("üèõÔ∏è PATRIMONIO (% del Total de Patrimonio):")
                    for patrimonio in datos_a√±o['patrimonio']['cuentas']:
                        print(f"   ‚Ä¢ {patrimonio['cuenta']}: {patrimonio['valor']:,.0f} ({patrimonio['porcentaje_vertical']:.2f}%)")
                    print()
                
                print("=" * 50)
        else:
            print("‚ùå No se pudieron generar resultados de an√°lisis vertical")
            
    except Exception as e:
        print(f"‚ùå Error durante el an√°lisis vertical: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print("‚úÖ Prueba con archivo real completada")

if __name__ == "__main__":
    probar_archivo_real_2009()