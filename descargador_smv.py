"""
Descargador Autom√°tico de Estados Financieros desde SMV
========================================================
Automatiza la descarga de estados financieros desde la web de la SMV (Superintendencia del Mercado de Valores)

Caracter√≠sticas:
- B√∫squeda autom√°tica de empresas por nombre
- Descarga consecutiva de m√∫ltiples a√±os
- Barra de progreso en tiempo real
- Configuraci√≥n de carpeta de descargas personalizada
- Manejo de errores robusto
- Compatible con ChromeDriver

Autor: Sistema de An√°lisis Financiero
Fecha: 3 de octubre de 2025
"""

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager  # ‚ú® Gesti√≥n autom√°tica de ChromeDriver
import time
import os
from typing import List, Dict, Callable, Optional
from pathlib import Path
import streamlit as st


class DescargadorSMV:
    """Clase para automatizar descargas de estados financieros desde la SMV"""
    
    # URL base de la SMV
    URL_SMV = "https://www.smv.gob.pe/SIMV/Frm_InformacionFinanciera?data=A70181B60967D74090DCD93C4920AA1D769614EC12"
    
    def __init__(self, download_dir: str = None, driver_path: str = None, headless: bool = True):
        """
        Inicializa el descargador
        
        Args:
            download_dir: Ruta de la carpeta de descargas (default: ./descargas)
            driver_path: Ruta del ChromeDriver (default: gesti√≥n autom√°tica con webdriver-manager)
            headless: Si True, ejecuta sin mostrar ventana de Chrome (m√°s r√°pido)
        """
        # Configurar carpeta de descargas
        if download_dir is None:
            self.download_dir = os.path.join(os.getcwd(), "descargas")
        else:
            self.download_dir = download_dir
        
        # Crear carpeta si no existe
        os.makedirs(self.download_dir, exist_ok=True)
        
        # Configurar ruta del driver (None = usar webdriver-manager autom√°tico)
        self.driver_path = driver_path
        self.headless = headless
        
        self.driver = None
        self.empresas_disponibles = []
    
    def _configurar_chrome(self) -> webdriver.Chrome:
        """
        Configura y devuelve una instancia de Chrome con opciones optimizadas
        
        Returns:
            webdriver.Chrome: Instancia configurada del navegador
        """
        options = webdriver.ChromeOptions()
        
        # Configurar descargas autom√°ticas
        prefs = {
            "download.default_directory": self.download_dir,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": True,
            "plugins.always_open_pdf_externally": True  # Descargar PDFs autom√°ticamente
        }
        options.add_experimental_option("prefs", prefs)
        
        # Opciones adicionales para mejor rendimiento
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-blink-features=AutomationControlled")  # Evitar detecci√≥n
        options.add_argument("--log-level=3")  # Reducir logs
        
        # ‚ú® MODO HEADLESS - No mostrar navegador (m√°s r√°pido)
        if self.headless:
            options.add_argument("--headless=new")  # Nuevo modo headless de Chrome
            options.add_argument("--window-size=1920,1080")  # Tama√±o de ventana virtual
        
        # ‚ú® Usar webdriver-manager para gesti√≥n autom√°tica de ChromeDriver
        if self.driver_path is None:
            # Gesti√≥n autom√°tica - descarga la versi√≥n correcta autom√°ticamente
            service = Service(ChromeDriverManager().install())
        else:
            # Usar ruta manual si se especific√≥
            service = Service(executable_path=self.driver_path)
        
        # Inicializar driver
        driver = webdriver.Chrome(service=service, options=options)
        
        if not self.headless:
            driver.maximize_window()
        
        return driver
    
    def iniciar_navegador(self) -> bool:
        """
        Inicia el navegador y navega a la p√°gina de la SMV
        
        Returns:
            bool: True si se inici√≥ correctamente, False en caso contrario
        """
        try:
            self.driver = self._configurar_chrome()
            self.driver.get(self.URL_SMV)
            
            # Esperar a que cargue la p√°gina
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.ID, "MainContent_cboDenominacionSocial"))
            )
            
            return True
        except Exception as e:
            print(f"‚ùå Error al iniciar navegador: {str(e)}")
            return False
    
    def cerrar_navegador(self):
        """Cierra el navegador y libera recursos"""
        if self.driver:
            try:
                self.driver.quit()
            except:
                pass
            self.driver = None
    
    def obtener_empresas_disponibles(self) -> List[Dict[str, str]]:
        """
        Obtiene la lista de empresas disponibles en el combo
        
        Returns:
            List[Dict]: Lista de diccionarios con 'value' y 'text' de cada empresa
        """
        try:
            select_element = self.driver.find_element(By.ID, "MainContent_cboDenominacionSocial")
            combo = Select(select_element)
            
            empresas = []
            for option in combo.options:
                value = option.get_attribute("value")
                text = option.text.strip()
                
                # Filtrar opci√≥n vac√≠a o "Seleccione"
                if value and value != "0" and text.lower() != "seleccione":
                    empresas.append({
                        'value': value,
                        'text': text
                    })
            
            self.empresas_disponibles = empresas
            return empresas
        
        except Exception as e:
            print(f"‚ùå Error al obtener empresas: {str(e)}")
            return []
    
    def buscar_empresa(self, nombre_busqueda: str) -> Optional[Dict[str, str]]:
        """
        Busca una empresa por nombre (b√∫squeda parcial)
        
        Args:
            nombre_busqueda: Texto a buscar en el nombre de la empresa
        
        Returns:
            Dict con 'value' y 'text' de la primera empresa encontrada, o None
        """
        if not self.empresas_disponibles:
            self.obtener_empresas_disponibles()
        
        nombre_busqueda_lower = nombre_busqueda.lower()
        
        # B√∫squeda exacta primero
        for empresa in self.empresas_disponibles:
            if empresa['text'].lower() == nombre_busqueda_lower:
                return empresa
        
        # B√∫squeda parcial (contiene)
        for empresa in self.empresas_disponibles:
            if nombre_busqueda_lower in empresa['text'].lower():
                return empresa
        
        # B√∫squeda por palabras clave (cualquier palabra coincide)
        palabras_busqueda = nombre_busqueda_lower.split()
        for empresa in self.empresas_disponibles:
            texto_empresa_lower = empresa['text'].lower()
            if any(palabra in texto_empresa_lower for palabra in palabras_busqueda):
                return empresa
        
        return None
    
    def seleccionar_empresa(self, empresa: Dict[str, str]) -> bool:
        """
        Selecciona una empresa del combo
        
        Args:
            empresa: Dict con 'value' y 'text' de la empresa
        
        Returns:
            bool: True si se seleccion√≥ correctamente
        """
        try:
            select_element = self.driver.find_element(By.ID, "MainContent_cboDenominacionSocial")
            combo = Select(select_element)
            combo.select_by_value(empresa['value'])
            
            time.sleep(1)  # Esperar recarga
            return True
        
        except Exception as e:
            print(f"‚ùå Error al seleccionar empresa: {str(e)}")
            return False
    
    def seleccionar_periodo_anual(self) -> bool:
        """
        Selecciona el periodo 'Anual'
        
        Returns:
            bool: True si se seleccion√≥ correctamente
        """
        try:
            radio_anual = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.ID, "MainContent_cboPeriodo_1"))
            )
            radio_anual.click()
            
            time.sleep(1)  # Esperar postback
            return True
        
        except Exception as e:
            print(f"‚ùå Error al seleccionar periodo anual: {str(e)}")
            return False
    
    def descargar_a√±o(self, a√±o: int, callback_progreso: Callable = None) -> bool:
        """
        Descarga los estados financieros de un a√±o espec√≠fico
        
        Args:
            a√±o: A√±o a descargar (ej: 2024)
            callback_progreso: Funci√≥n callback para actualizar progreso
        
        Returns:
            bool: True si se descarg√≥ correctamente
        """
        try:
            if callback_progreso:
                callback_progreso(f"üìÖ Seleccionando a√±o {a√±o}...")
            
            # Seleccionar a√±o
            anio_dropdown = Select(self.driver.find_element(By.ID, "MainContent_cboAnio"))
            anio_dropdown.select_by_value(str(a√±o))
            time.sleep(1)
            
            if callback_progreso:
                callback_progreso(f"üîç Buscando registros del a√±o {a√±o}...")
            
            # Clic en Buscar
            btn_buscar = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.ID, "MainContent_cbBuscar"))
            )
            btn_buscar.click()
            
            # Esperar a que desaparezca el modal de carga
            WebDriverWait(self.driver, 30).until(
                EC.invisibility_of_element_located((By.ID, "myLoading"))
            )
            
            if callback_progreso:
                callback_progreso(f"üìä Esperando resultados del a√±o {a√±o}...")
            
            # Esperar resultados
            filas = WebDriverWait(self.driver, 30).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, "#MainContent_grdInfoFinanciera tr.item-grid"))
            )
            
            if callback_progreso:
                callback_progreso(f"‚úÖ {len(filas)} registros encontrados para {a√±o}")
            
            # Buscar fila con "Estado Financiero"
            link = None
            for fila in filas:
                columnas = fila.find_elements(By.TAG_NAME, "td")
                if len(columnas) > 1:
                    texto_col = self._normalizar_texto(columnas[1].text.strip())
                    if "estado financiero" in texto_col:
                        try:
                            link = fila.find_element(By.XPATH, ".//a[contains(@title, 'detalle') and contains(@title, 'Financieros')]")
                            if link:
                                break
                        except:
                            continue
            
            if not link:
                if callback_progreso:
                    callback_progreso(f"‚ö†Ô∏è No se encontr√≥ 'Estados Financieros' para el a√±o {a√±o}")
                return False
            
            if callback_progreso:
                callback_progreso(f"üîó Abriendo detalle de Estados Financieros {a√±o}...")
            
            # Guardar ventana principal
            main_window = self.driver.current_window_handle
            
            # Asegurar que modal desapareci√≥
            WebDriverWait(self.driver, 30).until(
                EC.invisibility_of_element_located((By.ID, "myLoading"))
            )
            
            # Re-buscar link (DOM pudo recargarse)
            link = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//a[contains(@title, 'detalle') and contains(@title, 'Financieros')]"))
            )
            
            # Scroll y clic con JavaScript
            self.driver.execute_script("arguments[0].scrollIntoView(true);", link)
            self.driver.execute_script("arguments[0].click();", link)
            
            # Esperar nueva pesta√±a
            WebDriverWait(self.driver, 10).until(EC.number_of_windows_to_be(2))
            
            # Cambiar a nueva pesta√±a
            self.driver.switch_to.window(self.driver.window_handles[-1])
            
            if callback_progreso:
                callback_progreso(f"üì• Descargando archivo Excel del a√±o {a√±o}...")
            
            # Clic en bot√≥n Excel
            excel_btn = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.ID, "cbExcel"))
            )
            self.driver.execute_script("arguments[0].scrollIntoView(true);", excel_btn)
            excel_btn.click()
            
            # Esperar descarga
            time.sleep(3)  # Ajustar seg√∫n velocidad de red
            
            # Verificar descarga
            archivo_descargado = self._verificar_descarga_reciente()
            
            # Cerrar pesta√±a y volver a principal
            self.driver.close()
            self.driver.switch_to.window(main_window)
            
            if archivo_descargado:
                if callback_progreso:
                    callback_progreso(f"‚úÖ Archivo {a√±o} descargado: {archivo_descargado}")
                return True
            else:
                if callback_progreso:
                    callback_progreso(f"‚ö†Ô∏è No se detect√≥ archivo descargado para {a√±o}")
                return False
        
        except TimeoutException:
            if callback_progreso:
                callback_progreso(f"‚è±Ô∏è Timeout al procesar a√±o {a√±o}")
            return False
        except Exception as e:
            if callback_progreso:
                callback_progreso(f"‚ùå Error al descargar a√±o {a√±o}: {str(e)}")
            return False
    
    def descargar_rango_a√±os(
        self, 
        a√±o_inicio: int, 
        a√±o_fin: int, 
        callback_progreso: Callable = None
    ) -> Dict[str, List[int]]:
        """
        Descarga estados financieros de un rango de a√±os
        
        Args:
            a√±o_inicio: A√±o inicial (m√°s reciente, ej: 2024)
            a√±o_fin: A√±o final (m√°s antiguo, ej: 2020)
            callback_progreso: Funci√≥n callback para actualizar progreso
        
        Returns:
            Dict con listas de a√±os 'exitosos' y 'fallidos'
        """
        resultados = {
            'exitosos': [],
            'fallidos': []
        }
        
        # Generar lista de a√±os (descendente)
        a√±os = list(range(a√±o_inicio, a√±o_fin - 1, -1))
        total_a√±os = len(a√±os)
        
        for idx, a√±o in enumerate(a√±os, 1):
            if callback_progreso:
                callback_progreso(f"\nüîÑ Procesando a√±o {a√±o} ({idx}/{total_a√±os})...")
            
            exito = self.descargar_a√±o(a√±o, callback_progreso)
            
            if exito:
                resultados['exitosos'].append(a√±o)
            else:
                resultados['fallidos'].append(a√±o)
            
            # Peque√±a pausa entre descargas
            time.sleep(2)
        
        return resultados
    
    def _normalizar_texto(self, texto: str) -> str:
        """Normaliza texto removiendo acentos y convirtiendo a min√∫sculas"""
        texto = texto.lower()
        reemplazos = {'√°': 'a', '√©': 'e', '√≠': 'i', '√≥': 'o', '√∫': 'u', '√±': 'n'}
        for original, reemplazo in reemplazos.items():
            texto = texto.replace(original, reemplazo)
        return texto
    
    def _verificar_descarga_reciente(self, timeout: int = 10) -> Optional[str]:
        """
        Verifica si se descarg√≥ un archivo recientemente
        
        Args:
            timeout: Segundos a esperar por el archivo
        
        Returns:
            Nombre del archivo descargado o None
        """
        tiempo_inicio = time.time()
        
        while time.time() - tiempo_inicio < timeout:
            try:
                archivos = os.listdir(self.download_dir)
                excel_files = [f for f in archivos if f.endswith((".xls", ".xlsx"))]
                
                if excel_files:
                    # Obtener el archivo m√°s reciente
                    archivos_con_tiempo = [
                        (f, os.path.getmtime(os.path.join(self.download_dir, f)))
                        for f in excel_files
                    ]
                    archivo_mas_reciente = max(archivos_con_tiempo, key=lambda x: x[1])
                    
                    # Verificar que se descarg√≥ hace menos de 10 segundos
                    if time.time() - archivo_mas_reciente[1] < 10:
                        return archivo_mas_reciente[0]
            except:
                pass
            
            time.sleep(0.5)
        
        return None
    
    def proceso_completo(
        self, 
        nombre_empresa: str, 
        a√±o_inicio: int, 
        a√±o_fin: int,
        callback_progreso: Callable = None
    ) -> Dict:
        """
        Proceso completo: buscar empresa y descargar rango de a√±os
        
        Args:
            nombre_empresa: Nombre de la empresa a buscar
            a√±o_inicio: A√±o inicial (m√°s reciente)
            a√±o_fin: A√±o final (m√°s antiguo)
            callback_progreso: Funci√≥n callback para actualizar progreso
        
        Returns:
            Dict con resultados del proceso
        """
        try:
            if callback_progreso:
                callback_progreso("üöÄ Iniciando navegador...")
            
            if not self.iniciar_navegador():
                return {'error': 'No se pudo iniciar el navegador'}
            
            if callback_progreso:
                callback_progreso("üìã Obteniendo lista de empresas...")
            
            self.obtener_empresas_disponibles()
            
            if callback_progreso:
                callback_progreso(f"üîç Buscando empresa: {nombre_empresa}")
            
            empresa = self.buscar_empresa(nombre_empresa)
            
            if not empresa:
                self.cerrar_navegador()
                return {'error': f'No se encontr√≥ la empresa: {nombre_empresa}'}
            
            if callback_progreso:
                callback_progreso(f"‚úÖ Empresa encontrada: {empresa['text']}")
            
            if not self.seleccionar_empresa(empresa):
                self.cerrar_navegador()
                return {'error': 'No se pudo seleccionar la empresa'}
            
            if callback_progreso:
                callback_progreso("üìÖ Seleccionando periodo anual...")
            
            if not self.seleccionar_periodo_anual():
                self.cerrar_navegador()
                return {'error': 'No se pudo seleccionar periodo anual'}
            
            if callback_progreso:
                callback_progreso(f"üì• Iniciando descargas de {a√±o_inicio} a {a√±o_fin}...")
            
            resultados = self.descargar_rango_a√±os(a√±o_inicio, a√±o_fin, callback_progreso)
            
            if callback_progreso:
                callback_progreso("üîí Cerrando navegador...")
            
            self.cerrar_navegador()
            
            return {
                'empresa': empresa['text'],
                'a√±os_exitosos': resultados['exitosos'],
                'a√±os_fallidos': resultados['fallidos'],
                'total_exitosos': len(resultados['exitosos']),
                'total_fallidos': len(resultados['fallidos']),
                'carpeta_descargas': self.download_dir
            }
        
        except Exception as e:
            self.cerrar_navegador()
            return {'error': f'Error en proceso completo: {str(e)}'}


# ===== FUNCI√ìN DE PRUEBA =====
if __name__ == "__main__":
    print("="*80)
    print("DESCARGADOR AUTOM√ÅTICO DE ESTADOS FINANCIEROS - SMV")
    print("="*80)
    
    def callback_test(mensaje):
        """Callback simple para testing"""
        print(f"  {mensaje}")
    
    # Configuraci√≥n
    descargador = DescargadorSMV(
        download_dir=os.path.join(os.getcwd(), "descargas"),
        driver_path=os.path.join(os.getcwd(), "drivers", "chromedriver.exe")
    )
    
    # Proceso completo
    print("\nüöÄ Iniciando proceso de descarga...")
    print(f"üìÇ Carpeta de descargas: {descargador.download_dir}\n")
    
    resultado = descargador.proceso_completo(
        nombre_empresa="SAN JUAN",  # Prueba con b√∫squeda parcial
        a√±o_inicio=2024,
        a√±o_fin=2022,
        callback_progreso=callback_test
    )
    
    # Mostrar resultados
    print("\n" + "="*80)
    print("RESUMEN DE DESCARGAS")
    print("="*80)
    
    if 'error' in resultado:
        print(f"‚ùå ERROR: {resultado['error']}")
    else:
        print(f"‚úÖ Empresa: {resultado['empresa']}")
        print(f"üìÇ Carpeta: {resultado['carpeta_descargas']}")
        print(f"‚úÖ A√±os exitosos: {resultado['total_exitosos']} - {resultado['a√±os_exitosos']}")
        if resultado['a√±os_fallidos']:
            print(f"‚ö†Ô∏è A√±os fallidos: {resultado['total_fallidos']} - {resultado['a√±os_fallidos']}")
        print(f"\nüéâ Proceso completado exitosamente!")
